
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model buy_log
 * 
 */
export type buy_log = $Result.DefaultSelection<Prisma.$buy_logPayload>
/**
 * Model category
 * 
 */
export type category = $Result.DefaultSelection<Prisma.$categoryPayload>
/**
 * Model game
 * 
 */
export type game = $Result.DefaultSelection<Prisma.$gamePayload>
/**
 * Model game_act
 * 
 */
export type game_act = $Result.DefaultSelection<Prisma.$game_actPayload>
/**
 * Model redeem_log
 * 
 */
export type redeem_log = $Result.DefaultSelection<Prisma.$redeem_logPayload>
/**
 * Model users
 * 
 */
export type users = $Result.DefaultSelection<Prisma.$usersPayload>
/**
 * Model setup
 * 
 */
export type setup = $Result.DefaultSelection<Prisma.$setupPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Buy_logs
 * const buy_logs = await prisma.buy_log.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Buy_logs
   * const buy_logs = await prisma.buy_log.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs, $Utils.Call<Prisma.TypeMapCb, {
    extArgs: ExtArgs
  }>, ClientOptions>

      /**
   * `prisma.buy_log`: Exposes CRUD operations for the **buy_log** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Buy_logs
    * const buy_logs = await prisma.buy_log.findMany()
    * ```
    */
  get buy_log(): Prisma.buy_logDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.category`: Exposes CRUD operations for the **category** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categories
    * const categories = await prisma.category.findMany()
    * ```
    */
  get category(): Prisma.categoryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.game`: Exposes CRUD operations for the **game** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Games
    * const games = await prisma.game.findMany()
    * ```
    */
  get game(): Prisma.gameDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.game_act`: Exposes CRUD operations for the **game_act** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Game_acts
    * const game_acts = await prisma.game_act.findMany()
    * ```
    */
  get game_act(): Prisma.game_actDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.redeem_log`: Exposes CRUD operations for the **redeem_log** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Redeem_logs
    * const redeem_logs = await prisma.redeem_log.findMany()
    * ```
    */
  get redeem_log(): Prisma.redeem_logDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.users`: Exposes CRUD operations for the **users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.usersDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.setup`: Exposes CRUD operations for the **setup** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Setups
    * const setups = await prisma.setup.findMany()
    * ```
    */
  get setup(): Prisma.setupDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.16.2
   * Query Engine version: 34ace0eb2704183d2c05b60b52fba5c43c13f303
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    buy_log: 'buy_log',
    category: 'category',
    game: 'game',
    game_act: 'game_act',
    redeem_log: 'redeem_log',
    users: 'users',
    setup: 'setup'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "buy_log" | "category" | "game" | "game_act" | "redeem_log" | "users" | "setup"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      buy_log: {
        payload: Prisma.$buy_logPayload<ExtArgs>
        fields: Prisma.buy_logFieldRefs
        operations: {
          findUnique: {
            args: Prisma.buy_logFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$buy_logPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.buy_logFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$buy_logPayload>
          }
          findFirst: {
            args: Prisma.buy_logFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$buy_logPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.buy_logFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$buy_logPayload>
          }
          findMany: {
            args: Prisma.buy_logFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$buy_logPayload>[]
          }
          create: {
            args: Prisma.buy_logCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$buy_logPayload>
          }
          createMany: {
            args: Prisma.buy_logCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.buy_logDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$buy_logPayload>
          }
          update: {
            args: Prisma.buy_logUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$buy_logPayload>
          }
          deleteMany: {
            args: Prisma.buy_logDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.buy_logUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.buy_logUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$buy_logPayload>
          }
          aggregate: {
            args: Prisma.Buy_logAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBuy_log>
          }
          groupBy: {
            args: Prisma.buy_logGroupByArgs<ExtArgs>
            result: $Utils.Optional<Buy_logGroupByOutputType>[]
          }
          count: {
            args: Prisma.buy_logCountArgs<ExtArgs>
            result: $Utils.Optional<Buy_logCountAggregateOutputType> | number
          }
        }
      }
      category: {
        payload: Prisma.$categoryPayload<ExtArgs>
        fields: Prisma.categoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.categoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$categoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.categoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$categoryPayload>
          }
          findFirst: {
            args: Prisma.categoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$categoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.categoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$categoryPayload>
          }
          findMany: {
            args: Prisma.categoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$categoryPayload>[]
          }
          create: {
            args: Prisma.categoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$categoryPayload>
          }
          createMany: {
            args: Prisma.categoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.categoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$categoryPayload>
          }
          update: {
            args: Prisma.categoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$categoryPayload>
          }
          deleteMany: {
            args: Prisma.categoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.categoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.categoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$categoryPayload>
          }
          aggregate: {
            args: Prisma.CategoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCategory>
          }
          groupBy: {
            args: Prisma.categoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<CategoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.categoryCountArgs<ExtArgs>
            result: $Utils.Optional<CategoryCountAggregateOutputType> | number
          }
        }
      }
      game: {
        payload: Prisma.$gamePayload<ExtArgs>
        fields: Prisma.gameFieldRefs
        operations: {
          findUnique: {
            args: Prisma.gameFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$gamePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.gameFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$gamePayload>
          }
          findFirst: {
            args: Prisma.gameFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$gamePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.gameFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$gamePayload>
          }
          findMany: {
            args: Prisma.gameFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$gamePayload>[]
          }
          create: {
            args: Prisma.gameCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$gamePayload>
          }
          createMany: {
            args: Prisma.gameCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.gameDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$gamePayload>
          }
          update: {
            args: Prisma.gameUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$gamePayload>
          }
          deleteMany: {
            args: Prisma.gameDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.gameUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.gameUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$gamePayload>
          }
          aggregate: {
            args: Prisma.GameAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGame>
          }
          groupBy: {
            args: Prisma.gameGroupByArgs<ExtArgs>
            result: $Utils.Optional<GameGroupByOutputType>[]
          }
          count: {
            args: Prisma.gameCountArgs<ExtArgs>
            result: $Utils.Optional<GameCountAggregateOutputType> | number
          }
        }
      }
      game_act: {
        payload: Prisma.$game_actPayload<ExtArgs>
        fields: Prisma.game_actFieldRefs
        operations: {
          findUnique: {
            args: Prisma.game_actFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$game_actPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.game_actFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$game_actPayload>
          }
          findFirst: {
            args: Prisma.game_actFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$game_actPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.game_actFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$game_actPayload>
          }
          findMany: {
            args: Prisma.game_actFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$game_actPayload>[]
          }
          create: {
            args: Prisma.game_actCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$game_actPayload>
          }
          createMany: {
            args: Prisma.game_actCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.game_actDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$game_actPayload>
          }
          update: {
            args: Prisma.game_actUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$game_actPayload>
          }
          deleteMany: {
            args: Prisma.game_actDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.game_actUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.game_actUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$game_actPayload>
          }
          aggregate: {
            args: Prisma.Game_actAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGame_act>
          }
          groupBy: {
            args: Prisma.game_actGroupByArgs<ExtArgs>
            result: $Utils.Optional<Game_actGroupByOutputType>[]
          }
          count: {
            args: Prisma.game_actCountArgs<ExtArgs>
            result: $Utils.Optional<Game_actCountAggregateOutputType> | number
          }
        }
      }
      redeem_log: {
        payload: Prisma.$redeem_logPayload<ExtArgs>
        fields: Prisma.redeem_logFieldRefs
        operations: {
          findUnique: {
            args: Prisma.redeem_logFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$redeem_logPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.redeem_logFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$redeem_logPayload>
          }
          findFirst: {
            args: Prisma.redeem_logFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$redeem_logPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.redeem_logFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$redeem_logPayload>
          }
          findMany: {
            args: Prisma.redeem_logFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$redeem_logPayload>[]
          }
          create: {
            args: Prisma.redeem_logCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$redeem_logPayload>
          }
          createMany: {
            args: Prisma.redeem_logCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.redeem_logDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$redeem_logPayload>
          }
          update: {
            args: Prisma.redeem_logUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$redeem_logPayload>
          }
          deleteMany: {
            args: Prisma.redeem_logDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.redeem_logUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.redeem_logUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$redeem_logPayload>
          }
          aggregate: {
            args: Prisma.Redeem_logAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRedeem_log>
          }
          groupBy: {
            args: Prisma.redeem_logGroupByArgs<ExtArgs>
            result: $Utils.Optional<Redeem_logGroupByOutputType>[]
          }
          count: {
            args: Prisma.redeem_logCountArgs<ExtArgs>
            result: $Utils.Optional<Redeem_logCountAggregateOutputType> | number
          }
        }
      }
      users: {
        payload: Prisma.$usersPayload<ExtArgs>
        fields: Prisma.usersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.usersFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.usersFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          findFirst: {
            args: Prisma.usersFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.usersFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          findMany: {
            args: Prisma.usersFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>[]
          }
          create: {
            args: Prisma.usersCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          createMany: {
            args: Prisma.usersCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.usersDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          update: {
            args: Prisma.usersUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          deleteMany: {
            args: Prisma.usersDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.usersUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.usersUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          aggregate: {
            args: Prisma.UsersAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUsers>
          }
          groupBy: {
            args: Prisma.usersGroupByArgs<ExtArgs>
            result: $Utils.Optional<UsersGroupByOutputType>[]
          }
          count: {
            args: Prisma.usersCountArgs<ExtArgs>
            result: $Utils.Optional<UsersCountAggregateOutputType> | number
          }
        }
      }
      setup: {
        payload: Prisma.$setupPayload<ExtArgs>
        fields: Prisma.setupFieldRefs
        operations: {
          findUnique: {
            args: Prisma.setupFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$setupPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.setupFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$setupPayload>
          }
          findFirst: {
            args: Prisma.setupFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$setupPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.setupFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$setupPayload>
          }
          findMany: {
            args: Prisma.setupFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$setupPayload>[]
          }
          create: {
            args: Prisma.setupCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$setupPayload>
          }
          createMany: {
            args: Prisma.setupCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.setupDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$setupPayload>
          }
          update: {
            args: Prisma.setupUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$setupPayload>
          }
          deleteMany: {
            args: Prisma.setupDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.setupUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.setupUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$setupPayload>
          }
          aggregate: {
            args: Prisma.SetupAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSetup>
          }
          groupBy: {
            args: Prisma.setupGroupByArgs<ExtArgs>
            result: $Utils.Optional<SetupGroupByOutputType>[]
          }
          count: {
            args: Prisma.setupCountArgs<ExtArgs>
            result: $Utils.Optional<SetupCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    buy_log?: buy_logOmit
    category?: categoryOmit
    game?: gameOmit
    game_act?: game_actOmit
    redeem_log?: redeem_logOmit
    users?: usersOmit
    setup?: setupOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type GameCountOutputType
   */

  export type GameCountOutputType = {
    buy_log: number
    game_act: number
  }

  export type GameCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    buy_log?: boolean | GameCountOutputTypeCountBuy_logArgs
    game_act?: boolean | GameCountOutputTypeCountGame_actArgs
  }

  // Custom InputTypes
  /**
   * GameCountOutputType without action
   */
  export type GameCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameCountOutputType
     */
    select?: GameCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * GameCountOutputType without action
   */
  export type GameCountOutputTypeCountBuy_logArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: buy_logWhereInput
  }

  /**
   * GameCountOutputType without action
   */
  export type GameCountOutputTypeCountGame_actArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: game_actWhereInput
  }


  /**
   * Count Type UsersCountOutputType
   */

  export type UsersCountOutputType = {
    buy_log: number
    game_act: number
    redeem_log: number
  }

  export type UsersCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    buy_log?: boolean | UsersCountOutputTypeCountBuy_logArgs
    game_act?: boolean | UsersCountOutputTypeCountGame_actArgs
    redeem_log?: boolean | UsersCountOutputTypeCountRedeem_logArgs
  }

  // Custom InputTypes
  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersCountOutputType
     */
    select?: UsersCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountBuy_logArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: buy_logWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountGame_actArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: game_actWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountRedeem_logArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: redeem_logWhereInput
  }


  /**
   * Models
   */

  /**
   * Model buy_log
   */

  export type AggregateBuy_log = {
    _count: Buy_logCountAggregateOutputType | null
    _avg: Buy_logAvgAggregateOutputType | null
    _sum: Buy_logSumAggregateOutputType | null
    _min: Buy_logMinAggregateOutputType | null
    _max: Buy_logMaxAggregateOutputType | null
  }

  export type Buy_logAvgAggregateOutputType = {
    id: number | null
    user_id: number | null
    game_id: number | null
    buy_time: number | null
    price: number | null
  }

  export type Buy_logSumAggregateOutputType = {
    id: number | null
    user_id: number | null
    game_id: number | null
    buy_time: number | null
    price: number | null
  }

  export type Buy_logMinAggregateOutputType = {
    id: number | null
    user_id: number | null
    game_id: number | null
    buy_time: number | null
    price: number | null
    isActive: boolean | null
    createdAt: Date | null
  }

  export type Buy_logMaxAggregateOutputType = {
    id: number | null
    user_id: number | null
    game_id: number | null
    buy_time: number | null
    price: number | null
    isActive: boolean | null
    createdAt: Date | null
  }

  export type Buy_logCountAggregateOutputType = {
    id: number
    user_id: number
    game_id: number
    buy_time: number
    price: number
    isActive: number
    createdAt: number
    _all: number
  }


  export type Buy_logAvgAggregateInputType = {
    id?: true
    user_id?: true
    game_id?: true
    buy_time?: true
    price?: true
  }

  export type Buy_logSumAggregateInputType = {
    id?: true
    user_id?: true
    game_id?: true
    buy_time?: true
    price?: true
  }

  export type Buy_logMinAggregateInputType = {
    id?: true
    user_id?: true
    game_id?: true
    buy_time?: true
    price?: true
    isActive?: true
    createdAt?: true
  }

  export type Buy_logMaxAggregateInputType = {
    id?: true
    user_id?: true
    game_id?: true
    buy_time?: true
    price?: true
    isActive?: true
    createdAt?: true
  }

  export type Buy_logCountAggregateInputType = {
    id?: true
    user_id?: true
    game_id?: true
    buy_time?: true
    price?: true
    isActive?: true
    createdAt?: true
    _all?: true
  }

  export type Buy_logAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which buy_log to aggregate.
     */
    where?: buy_logWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of buy_logs to fetch.
     */
    orderBy?: buy_logOrderByWithRelationInput | buy_logOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: buy_logWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` buy_logs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` buy_logs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned buy_logs
    **/
    _count?: true | Buy_logCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Buy_logAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Buy_logSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Buy_logMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Buy_logMaxAggregateInputType
  }

  export type GetBuy_logAggregateType<T extends Buy_logAggregateArgs> = {
        [P in keyof T & keyof AggregateBuy_log]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBuy_log[P]>
      : GetScalarType<T[P], AggregateBuy_log[P]>
  }




  export type buy_logGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: buy_logWhereInput
    orderBy?: buy_logOrderByWithAggregationInput | buy_logOrderByWithAggregationInput[]
    by: Buy_logScalarFieldEnum[] | Buy_logScalarFieldEnum
    having?: buy_logScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Buy_logCountAggregateInputType | true
    _avg?: Buy_logAvgAggregateInputType
    _sum?: Buy_logSumAggregateInputType
    _min?: Buy_logMinAggregateInputType
    _max?: Buy_logMaxAggregateInputType
  }

  export type Buy_logGroupByOutputType = {
    id: number
    user_id: number
    game_id: number
    buy_time: number
    price: number
    isActive: boolean
    createdAt: Date
    _count: Buy_logCountAggregateOutputType | null
    _avg: Buy_logAvgAggregateOutputType | null
    _sum: Buy_logSumAggregateOutputType | null
    _min: Buy_logMinAggregateOutputType | null
    _max: Buy_logMaxAggregateOutputType | null
  }

  type GetBuy_logGroupByPayload<T extends buy_logGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Buy_logGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Buy_logGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Buy_logGroupByOutputType[P]>
            : GetScalarType<T[P], Buy_logGroupByOutputType[P]>
        }
      >
    >


  export type buy_logSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    game_id?: boolean
    buy_time?: boolean
    price?: boolean
    isActive?: boolean
    createdAt?: boolean
    users?: boolean | usersDefaultArgs<ExtArgs>
    game?: boolean | gameDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["buy_log"]>


  export type buy_logSelectScalar = {
    id?: boolean
    user_id?: boolean
    game_id?: boolean
    buy_time?: boolean
    price?: boolean
    isActive?: boolean
    createdAt?: boolean
  }

  export type buy_logOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "user_id" | "game_id" | "buy_time" | "price" | "isActive" | "createdAt", ExtArgs["result"]["buy_log"]>
  export type buy_logInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | usersDefaultArgs<ExtArgs>
    game?: boolean | gameDefaultArgs<ExtArgs>
  }

  export type $buy_logPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "buy_log"
    objects: {
      users: Prisma.$usersPayload<ExtArgs>
      game: Prisma.$gamePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      user_id: number
      game_id: number
      buy_time: number
      price: number
      isActive: boolean
      createdAt: Date
    }, ExtArgs["result"]["buy_log"]>
    composites: {}
  }

  type buy_logGetPayload<S extends boolean | null | undefined | buy_logDefaultArgs> = $Result.GetResult<Prisma.$buy_logPayload, S>

  type buy_logCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<buy_logFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Buy_logCountAggregateInputType | true
    }

  export interface buy_logDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['buy_log'], meta: { name: 'buy_log' } }
    /**
     * Find zero or one Buy_log that matches the filter.
     * @param {buy_logFindUniqueArgs} args - Arguments to find a Buy_log
     * @example
     * // Get one Buy_log
     * const buy_log = await prisma.buy_log.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends buy_logFindUniqueArgs>(args: SelectSubset<T, buy_logFindUniqueArgs<ExtArgs>>): Prisma__buy_logClient<$Result.GetResult<Prisma.$buy_logPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Buy_log that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {buy_logFindUniqueOrThrowArgs} args - Arguments to find a Buy_log
     * @example
     * // Get one Buy_log
     * const buy_log = await prisma.buy_log.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends buy_logFindUniqueOrThrowArgs>(args: SelectSubset<T, buy_logFindUniqueOrThrowArgs<ExtArgs>>): Prisma__buy_logClient<$Result.GetResult<Prisma.$buy_logPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Buy_log that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {buy_logFindFirstArgs} args - Arguments to find a Buy_log
     * @example
     * // Get one Buy_log
     * const buy_log = await prisma.buy_log.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends buy_logFindFirstArgs>(args?: SelectSubset<T, buy_logFindFirstArgs<ExtArgs>>): Prisma__buy_logClient<$Result.GetResult<Prisma.$buy_logPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Buy_log that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {buy_logFindFirstOrThrowArgs} args - Arguments to find a Buy_log
     * @example
     * // Get one Buy_log
     * const buy_log = await prisma.buy_log.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends buy_logFindFirstOrThrowArgs>(args?: SelectSubset<T, buy_logFindFirstOrThrowArgs<ExtArgs>>): Prisma__buy_logClient<$Result.GetResult<Prisma.$buy_logPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Buy_logs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {buy_logFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Buy_logs
     * const buy_logs = await prisma.buy_log.findMany()
     * 
     * // Get first 10 Buy_logs
     * const buy_logs = await prisma.buy_log.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const buy_logWithIdOnly = await prisma.buy_log.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends buy_logFindManyArgs>(args?: SelectSubset<T, buy_logFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$buy_logPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Buy_log.
     * @param {buy_logCreateArgs} args - Arguments to create a Buy_log.
     * @example
     * // Create one Buy_log
     * const Buy_log = await prisma.buy_log.create({
     *   data: {
     *     // ... data to create a Buy_log
     *   }
     * })
     * 
     */
    create<T extends buy_logCreateArgs>(args: SelectSubset<T, buy_logCreateArgs<ExtArgs>>): Prisma__buy_logClient<$Result.GetResult<Prisma.$buy_logPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Buy_logs.
     * @param {buy_logCreateManyArgs} args - Arguments to create many Buy_logs.
     * @example
     * // Create many Buy_logs
     * const buy_log = await prisma.buy_log.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends buy_logCreateManyArgs>(args?: SelectSubset<T, buy_logCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Buy_log.
     * @param {buy_logDeleteArgs} args - Arguments to delete one Buy_log.
     * @example
     * // Delete one Buy_log
     * const Buy_log = await prisma.buy_log.delete({
     *   where: {
     *     // ... filter to delete one Buy_log
     *   }
     * })
     * 
     */
    delete<T extends buy_logDeleteArgs>(args: SelectSubset<T, buy_logDeleteArgs<ExtArgs>>): Prisma__buy_logClient<$Result.GetResult<Prisma.$buy_logPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Buy_log.
     * @param {buy_logUpdateArgs} args - Arguments to update one Buy_log.
     * @example
     * // Update one Buy_log
     * const buy_log = await prisma.buy_log.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends buy_logUpdateArgs>(args: SelectSubset<T, buy_logUpdateArgs<ExtArgs>>): Prisma__buy_logClient<$Result.GetResult<Prisma.$buy_logPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Buy_logs.
     * @param {buy_logDeleteManyArgs} args - Arguments to filter Buy_logs to delete.
     * @example
     * // Delete a few Buy_logs
     * const { count } = await prisma.buy_log.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends buy_logDeleteManyArgs>(args?: SelectSubset<T, buy_logDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Buy_logs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {buy_logUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Buy_logs
     * const buy_log = await prisma.buy_log.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends buy_logUpdateManyArgs>(args: SelectSubset<T, buy_logUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Buy_log.
     * @param {buy_logUpsertArgs} args - Arguments to update or create a Buy_log.
     * @example
     * // Update or create a Buy_log
     * const buy_log = await prisma.buy_log.upsert({
     *   create: {
     *     // ... data to create a Buy_log
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Buy_log we want to update
     *   }
     * })
     */
    upsert<T extends buy_logUpsertArgs>(args: SelectSubset<T, buy_logUpsertArgs<ExtArgs>>): Prisma__buy_logClient<$Result.GetResult<Prisma.$buy_logPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Buy_logs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {buy_logCountArgs} args - Arguments to filter Buy_logs to count.
     * @example
     * // Count the number of Buy_logs
     * const count = await prisma.buy_log.count({
     *   where: {
     *     // ... the filter for the Buy_logs we want to count
     *   }
     * })
    **/
    count<T extends buy_logCountArgs>(
      args?: Subset<T, buy_logCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Buy_logCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Buy_log.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Buy_logAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Buy_logAggregateArgs>(args: Subset<T, Buy_logAggregateArgs>): Prisma.PrismaPromise<GetBuy_logAggregateType<T>>

    /**
     * Group by Buy_log.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {buy_logGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends buy_logGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: buy_logGroupByArgs['orderBy'] }
        : { orderBy?: buy_logGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, buy_logGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBuy_logGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the buy_log model
   */
  readonly fields: buy_logFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for buy_log.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__buy_logClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    users<T extends usersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, usersDefaultArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    game<T extends gameDefaultArgs<ExtArgs> = {}>(args?: Subset<T, gameDefaultArgs<ExtArgs>>): Prisma__gameClient<$Result.GetResult<Prisma.$gamePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the buy_log model
   */ 
  interface buy_logFieldRefs {
    readonly id: FieldRef<"buy_log", 'Int'>
    readonly user_id: FieldRef<"buy_log", 'Int'>
    readonly game_id: FieldRef<"buy_log", 'Int'>
    readonly buy_time: FieldRef<"buy_log", 'Int'>
    readonly price: FieldRef<"buy_log", 'Int'>
    readonly isActive: FieldRef<"buy_log", 'Boolean'>
    readonly createdAt: FieldRef<"buy_log", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * buy_log findUnique
   */
  export type buy_logFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the buy_log
     */
    select?: buy_logSelect<ExtArgs> | null
    /**
     * Omit specific fields from the buy_log
     */
    omit?: buy_logOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: buy_logInclude<ExtArgs> | null
    /**
     * Filter, which buy_log to fetch.
     */
    where: buy_logWhereUniqueInput
  }

  /**
   * buy_log findUniqueOrThrow
   */
  export type buy_logFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the buy_log
     */
    select?: buy_logSelect<ExtArgs> | null
    /**
     * Omit specific fields from the buy_log
     */
    omit?: buy_logOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: buy_logInclude<ExtArgs> | null
    /**
     * Filter, which buy_log to fetch.
     */
    where: buy_logWhereUniqueInput
  }

  /**
   * buy_log findFirst
   */
  export type buy_logFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the buy_log
     */
    select?: buy_logSelect<ExtArgs> | null
    /**
     * Omit specific fields from the buy_log
     */
    omit?: buy_logOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: buy_logInclude<ExtArgs> | null
    /**
     * Filter, which buy_log to fetch.
     */
    where?: buy_logWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of buy_logs to fetch.
     */
    orderBy?: buy_logOrderByWithRelationInput | buy_logOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for buy_logs.
     */
    cursor?: buy_logWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` buy_logs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` buy_logs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of buy_logs.
     */
    distinct?: Buy_logScalarFieldEnum | Buy_logScalarFieldEnum[]
  }

  /**
   * buy_log findFirstOrThrow
   */
  export type buy_logFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the buy_log
     */
    select?: buy_logSelect<ExtArgs> | null
    /**
     * Omit specific fields from the buy_log
     */
    omit?: buy_logOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: buy_logInclude<ExtArgs> | null
    /**
     * Filter, which buy_log to fetch.
     */
    where?: buy_logWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of buy_logs to fetch.
     */
    orderBy?: buy_logOrderByWithRelationInput | buy_logOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for buy_logs.
     */
    cursor?: buy_logWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` buy_logs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` buy_logs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of buy_logs.
     */
    distinct?: Buy_logScalarFieldEnum | Buy_logScalarFieldEnum[]
  }

  /**
   * buy_log findMany
   */
  export type buy_logFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the buy_log
     */
    select?: buy_logSelect<ExtArgs> | null
    /**
     * Omit specific fields from the buy_log
     */
    omit?: buy_logOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: buy_logInclude<ExtArgs> | null
    /**
     * Filter, which buy_logs to fetch.
     */
    where?: buy_logWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of buy_logs to fetch.
     */
    orderBy?: buy_logOrderByWithRelationInput | buy_logOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing buy_logs.
     */
    cursor?: buy_logWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` buy_logs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` buy_logs.
     */
    skip?: number
    distinct?: Buy_logScalarFieldEnum | Buy_logScalarFieldEnum[]
  }

  /**
   * buy_log create
   */
  export type buy_logCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the buy_log
     */
    select?: buy_logSelect<ExtArgs> | null
    /**
     * Omit specific fields from the buy_log
     */
    omit?: buy_logOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: buy_logInclude<ExtArgs> | null
    /**
     * The data needed to create a buy_log.
     */
    data: XOR<buy_logCreateInput, buy_logUncheckedCreateInput>
  }

  /**
   * buy_log createMany
   */
  export type buy_logCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many buy_logs.
     */
    data: buy_logCreateManyInput | buy_logCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * buy_log update
   */
  export type buy_logUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the buy_log
     */
    select?: buy_logSelect<ExtArgs> | null
    /**
     * Omit specific fields from the buy_log
     */
    omit?: buy_logOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: buy_logInclude<ExtArgs> | null
    /**
     * The data needed to update a buy_log.
     */
    data: XOR<buy_logUpdateInput, buy_logUncheckedUpdateInput>
    /**
     * Choose, which buy_log to update.
     */
    where: buy_logWhereUniqueInput
  }

  /**
   * buy_log updateMany
   */
  export type buy_logUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update buy_logs.
     */
    data: XOR<buy_logUpdateManyMutationInput, buy_logUncheckedUpdateManyInput>
    /**
     * Filter which buy_logs to update
     */
    where?: buy_logWhereInput
  }

  /**
   * buy_log upsert
   */
  export type buy_logUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the buy_log
     */
    select?: buy_logSelect<ExtArgs> | null
    /**
     * Omit specific fields from the buy_log
     */
    omit?: buy_logOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: buy_logInclude<ExtArgs> | null
    /**
     * The filter to search for the buy_log to update in case it exists.
     */
    where: buy_logWhereUniqueInput
    /**
     * In case the buy_log found by the `where` argument doesn't exist, create a new buy_log with this data.
     */
    create: XOR<buy_logCreateInput, buy_logUncheckedCreateInput>
    /**
     * In case the buy_log was found with the provided `where` argument, update it with this data.
     */
    update: XOR<buy_logUpdateInput, buy_logUncheckedUpdateInput>
  }

  /**
   * buy_log delete
   */
  export type buy_logDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the buy_log
     */
    select?: buy_logSelect<ExtArgs> | null
    /**
     * Omit specific fields from the buy_log
     */
    omit?: buy_logOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: buy_logInclude<ExtArgs> | null
    /**
     * Filter which buy_log to delete.
     */
    where: buy_logWhereUniqueInput
  }

  /**
   * buy_log deleteMany
   */
  export type buy_logDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which buy_logs to delete
     */
    where?: buy_logWhereInput
  }

  /**
   * buy_log without action
   */
  export type buy_logDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the buy_log
     */
    select?: buy_logSelect<ExtArgs> | null
    /**
     * Omit specific fields from the buy_log
     */
    omit?: buy_logOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: buy_logInclude<ExtArgs> | null
  }


  /**
   * Model category
   */

  export type AggregateCategory = {
    _count: CategoryCountAggregateOutputType | null
    _avg: CategoryAvgAggregateOutputType | null
    _sum: CategorySumAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  export type CategoryAvgAggregateOutputType = {
    id: number | null
    visible: number | null
  }

  export type CategorySumAggregateOutputType = {
    id: number | null
    visible: number | null
  }

  export type CategoryMinAggregateOutputType = {
    id: number | null
    category_name: string | null
    visible: number | null
  }

  export type CategoryMaxAggregateOutputType = {
    id: number | null
    category_name: string | null
    visible: number | null
  }

  export type CategoryCountAggregateOutputType = {
    id: number
    category_name: number
    visible: number
    _all: number
  }


  export type CategoryAvgAggregateInputType = {
    id?: true
    visible?: true
  }

  export type CategorySumAggregateInputType = {
    id?: true
    visible?: true
  }

  export type CategoryMinAggregateInputType = {
    id?: true
    category_name?: true
    visible?: true
  }

  export type CategoryMaxAggregateInputType = {
    id?: true
    category_name?: true
    visible?: true
  }

  export type CategoryCountAggregateInputType = {
    id?: true
    category_name?: true
    visible?: true
    _all?: true
  }

  export type CategoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which category to aggregate.
     */
    where?: categoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categories to fetch.
     */
    orderBy?: categoryOrderByWithRelationInput | categoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: categoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned categories
    **/
    _count?: true | CategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CategoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CategorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoryMaxAggregateInputType
  }

  export type GetCategoryAggregateType<T extends CategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategory[P]>
      : GetScalarType<T[P], AggregateCategory[P]>
  }




  export type categoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: categoryWhereInput
    orderBy?: categoryOrderByWithAggregationInput | categoryOrderByWithAggregationInput[]
    by: CategoryScalarFieldEnum[] | CategoryScalarFieldEnum
    having?: categoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoryCountAggregateInputType | true
    _avg?: CategoryAvgAggregateInputType
    _sum?: CategorySumAggregateInputType
    _min?: CategoryMinAggregateInputType
    _max?: CategoryMaxAggregateInputType
  }

  export type CategoryGroupByOutputType = {
    id: number
    category_name: string
    visible: number
    _count: CategoryCountAggregateOutputType | null
    _avg: CategoryAvgAggregateOutputType | null
    _sum: CategorySumAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  type GetCategoryGroupByPayload<T extends categoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoryGroupByOutputType[P]>
            : GetScalarType<T[P], CategoryGroupByOutputType[P]>
        }
      >
    >


  export type categorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    category_name?: boolean
    visible?: boolean
  }, ExtArgs["result"]["category"]>


  export type categorySelectScalar = {
    id?: boolean
    category_name?: boolean
    visible?: boolean
  }

  export type categoryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "category_name" | "visible", ExtArgs["result"]["category"]>

  export type $categoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "category"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      category_name: string
      visible: number
    }, ExtArgs["result"]["category"]>
    composites: {}
  }

  type categoryGetPayload<S extends boolean | null | undefined | categoryDefaultArgs> = $Result.GetResult<Prisma.$categoryPayload, S>

  type categoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<categoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CategoryCountAggregateInputType | true
    }

  export interface categoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['category'], meta: { name: 'category' } }
    /**
     * Find zero or one Category that matches the filter.
     * @param {categoryFindUniqueArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends categoryFindUniqueArgs>(args: SelectSubset<T, categoryFindUniqueArgs<ExtArgs>>): Prisma__categoryClient<$Result.GetResult<Prisma.$categoryPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Category that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {categoryFindUniqueOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends categoryFindUniqueOrThrowArgs>(args: SelectSubset<T, categoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__categoryClient<$Result.GetResult<Prisma.$categoryPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Category that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoryFindFirstArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends categoryFindFirstArgs>(args?: SelectSubset<T, categoryFindFirstArgs<ExtArgs>>): Prisma__categoryClient<$Result.GetResult<Prisma.$categoryPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Category that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoryFindFirstOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends categoryFindFirstOrThrowArgs>(args?: SelectSubset<T, categoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__categoryClient<$Result.GetResult<Prisma.$categoryPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categories
     * const categories = await prisma.category.findMany()
     * 
     * // Get first 10 Categories
     * const categories = await prisma.category.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categoryWithIdOnly = await prisma.category.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends categoryFindManyArgs>(args?: SelectSubset<T, categoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$categoryPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Category.
     * @param {categoryCreateArgs} args - Arguments to create a Category.
     * @example
     * // Create one Category
     * const Category = await prisma.category.create({
     *   data: {
     *     // ... data to create a Category
     *   }
     * })
     * 
     */
    create<T extends categoryCreateArgs>(args: SelectSubset<T, categoryCreateArgs<ExtArgs>>): Prisma__categoryClient<$Result.GetResult<Prisma.$categoryPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Categories.
     * @param {categoryCreateManyArgs} args - Arguments to create many Categories.
     * @example
     * // Create many Categories
     * const category = await prisma.category.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends categoryCreateManyArgs>(args?: SelectSubset<T, categoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Category.
     * @param {categoryDeleteArgs} args - Arguments to delete one Category.
     * @example
     * // Delete one Category
     * const Category = await prisma.category.delete({
     *   where: {
     *     // ... filter to delete one Category
     *   }
     * })
     * 
     */
    delete<T extends categoryDeleteArgs>(args: SelectSubset<T, categoryDeleteArgs<ExtArgs>>): Prisma__categoryClient<$Result.GetResult<Prisma.$categoryPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Category.
     * @param {categoryUpdateArgs} args - Arguments to update one Category.
     * @example
     * // Update one Category
     * const category = await prisma.category.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends categoryUpdateArgs>(args: SelectSubset<T, categoryUpdateArgs<ExtArgs>>): Prisma__categoryClient<$Result.GetResult<Prisma.$categoryPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Categories.
     * @param {categoryDeleteManyArgs} args - Arguments to filter Categories to delete.
     * @example
     * // Delete a few Categories
     * const { count } = await prisma.category.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends categoryDeleteManyArgs>(args?: SelectSubset<T, categoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categories
     * const category = await prisma.category.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends categoryUpdateManyArgs>(args: SelectSubset<T, categoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Category.
     * @param {categoryUpsertArgs} args - Arguments to update or create a Category.
     * @example
     * // Update or create a Category
     * const category = await prisma.category.upsert({
     *   create: {
     *     // ... data to create a Category
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Category we want to update
     *   }
     * })
     */
    upsert<T extends categoryUpsertArgs>(args: SelectSubset<T, categoryUpsertArgs<ExtArgs>>): Prisma__categoryClient<$Result.GetResult<Prisma.$categoryPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoryCountArgs} args - Arguments to filter Categories to count.
     * @example
     * // Count the number of Categories
     * const count = await prisma.category.count({
     *   where: {
     *     // ... the filter for the Categories we want to count
     *   }
     * })
    **/
    count<T extends categoryCountArgs>(
      args?: Subset<T, categoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoryAggregateArgs>(args: Subset<T, CategoryAggregateArgs>): Prisma.PrismaPromise<GetCategoryAggregateType<T>>

    /**
     * Group by Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends categoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: categoryGroupByArgs['orderBy'] }
        : { orderBy?: categoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, categoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the category model
   */
  readonly fields: categoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for category.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__categoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the category model
   */ 
  interface categoryFieldRefs {
    readonly id: FieldRef<"category", 'Int'>
    readonly category_name: FieldRef<"category", 'String'>
    readonly visible: FieldRef<"category", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * category findUnique
   */
  export type categoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the category
     */
    select?: categorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the category
     */
    omit?: categoryOmit<ExtArgs> | null
    /**
     * Filter, which category to fetch.
     */
    where: categoryWhereUniqueInput
  }

  /**
   * category findUniqueOrThrow
   */
  export type categoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the category
     */
    select?: categorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the category
     */
    omit?: categoryOmit<ExtArgs> | null
    /**
     * Filter, which category to fetch.
     */
    where: categoryWhereUniqueInput
  }

  /**
   * category findFirst
   */
  export type categoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the category
     */
    select?: categorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the category
     */
    omit?: categoryOmit<ExtArgs> | null
    /**
     * Filter, which category to fetch.
     */
    where?: categoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categories to fetch.
     */
    orderBy?: categoryOrderByWithRelationInput | categoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for categories.
     */
    cursor?: categoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * category findFirstOrThrow
   */
  export type categoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the category
     */
    select?: categorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the category
     */
    omit?: categoryOmit<ExtArgs> | null
    /**
     * Filter, which category to fetch.
     */
    where?: categoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categories to fetch.
     */
    orderBy?: categoryOrderByWithRelationInput | categoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for categories.
     */
    cursor?: categoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * category findMany
   */
  export type categoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the category
     */
    select?: categorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the category
     */
    omit?: categoryOmit<ExtArgs> | null
    /**
     * Filter, which categories to fetch.
     */
    where?: categoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categories to fetch.
     */
    orderBy?: categoryOrderByWithRelationInput | categoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing categories.
     */
    cursor?: categoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categories.
     */
    skip?: number
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * category create
   */
  export type categoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the category
     */
    select?: categorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the category
     */
    omit?: categoryOmit<ExtArgs> | null
    /**
     * The data needed to create a category.
     */
    data: XOR<categoryCreateInput, categoryUncheckedCreateInput>
  }

  /**
   * category createMany
   */
  export type categoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many categories.
     */
    data: categoryCreateManyInput | categoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * category update
   */
  export type categoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the category
     */
    select?: categorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the category
     */
    omit?: categoryOmit<ExtArgs> | null
    /**
     * The data needed to update a category.
     */
    data: XOR<categoryUpdateInput, categoryUncheckedUpdateInput>
    /**
     * Choose, which category to update.
     */
    where: categoryWhereUniqueInput
  }

  /**
   * category updateMany
   */
  export type categoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update categories.
     */
    data: XOR<categoryUpdateManyMutationInput, categoryUncheckedUpdateManyInput>
    /**
     * Filter which categories to update
     */
    where?: categoryWhereInput
  }

  /**
   * category upsert
   */
  export type categoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the category
     */
    select?: categorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the category
     */
    omit?: categoryOmit<ExtArgs> | null
    /**
     * The filter to search for the category to update in case it exists.
     */
    where: categoryWhereUniqueInput
    /**
     * In case the category found by the `where` argument doesn't exist, create a new category with this data.
     */
    create: XOR<categoryCreateInput, categoryUncheckedCreateInput>
    /**
     * In case the category was found with the provided `where` argument, update it with this data.
     */
    update: XOR<categoryUpdateInput, categoryUncheckedUpdateInput>
  }

  /**
   * category delete
   */
  export type categoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the category
     */
    select?: categorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the category
     */
    omit?: categoryOmit<ExtArgs> | null
    /**
     * Filter which category to delete.
     */
    where: categoryWhereUniqueInput
  }

  /**
   * category deleteMany
   */
  export type categoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which categories to delete
     */
    where?: categoryWhereInput
  }

  /**
   * category without action
   */
  export type categoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the category
     */
    select?: categorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the category
     */
    omit?: categoryOmit<ExtArgs> | null
  }


  /**
   * Model game
   */

  export type AggregateGame = {
    _count: GameCountAggregateOutputType | null
    _avg: GameAvgAggregateOutputType | null
    _sum: GameSumAggregateOutputType | null
    _min: GameMinAggregateOutputType | null
    _max: GameMaxAggregateOutputType | null
  }

  export type GameAvgAggregateOutputType = {
    id: number | null
    day_h: number | null
    day_1: number | null
    day_3: number | null
    day_7: number | null
    day_15: number | null
    day_30: number | null
    day_p: number | null
    visible: number | null
  }

  export type GameSumAggregateOutputType = {
    id: number | null
    day_h: number | null
    day_1: number | null
    day_3: number | null
    day_7: number | null
    day_15: number | null
    day_30: number | null
    day_p: number | null
    visible: number | null
  }

  export type GameMinAggregateOutputType = {
    id: number | null
    name: string | null
    short_name: string | null
    day_h: number | null
    day_1: number | null
    day_3: number | null
    day_7: number | null
    day_15: number | null
    day_30: number | null
    day_p: number | null
    download_src: string | null
    img_src: string | null
    hack_img_scr: string | null
    status: string | null
    detail: string | null
    game_src: string | null
    visible: number | null
    youtube_link: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type GameMaxAggregateOutputType = {
    id: number | null
    name: string | null
    short_name: string | null
    day_h: number | null
    day_1: number | null
    day_3: number | null
    day_7: number | null
    day_15: number | null
    day_30: number | null
    day_p: number | null
    download_src: string | null
    img_src: string | null
    hack_img_scr: string | null
    status: string | null
    detail: string | null
    game_src: string | null
    visible: number | null
    youtube_link: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type GameCountAggregateOutputType = {
    id: number
    name: number
    short_name: number
    day_h: number
    day_1: number
    day_3: number
    day_7: number
    day_15: number
    day_30: number
    day_p: number
    download_src: number
    img_src: number
    hack_img_scr: number
    status: number
    detail: number
    game_src: number
    visible: number
    youtube_link: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type GameAvgAggregateInputType = {
    id?: true
    day_h?: true
    day_1?: true
    day_3?: true
    day_7?: true
    day_15?: true
    day_30?: true
    day_p?: true
    visible?: true
  }

  export type GameSumAggregateInputType = {
    id?: true
    day_h?: true
    day_1?: true
    day_3?: true
    day_7?: true
    day_15?: true
    day_30?: true
    day_p?: true
    visible?: true
  }

  export type GameMinAggregateInputType = {
    id?: true
    name?: true
    short_name?: true
    day_h?: true
    day_1?: true
    day_3?: true
    day_7?: true
    day_15?: true
    day_30?: true
    day_p?: true
    download_src?: true
    img_src?: true
    hack_img_scr?: true
    status?: true
    detail?: true
    game_src?: true
    visible?: true
    youtube_link?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type GameMaxAggregateInputType = {
    id?: true
    name?: true
    short_name?: true
    day_h?: true
    day_1?: true
    day_3?: true
    day_7?: true
    day_15?: true
    day_30?: true
    day_p?: true
    download_src?: true
    img_src?: true
    hack_img_scr?: true
    status?: true
    detail?: true
    game_src?: true
    visible?: true
    youtube_link?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type GameCountAggregateInputType = {
    id?: true
    name?: true
    short_name?: true
    day_h?: true
    day_1?: true
    day_3?: true
    day_7?: true
    day_15?: true
    day_30?: true
    day_p?: true
    download_src?: true
    img_src?: true
    hack_img_scr?: true
    status?: true
    detail?: true
    game_src?: true
    visible?: true
    youtube_link?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type GameAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which game to aggregate.
     */
    where?: gameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of games to fetch.
     */
    orderBy?: gameOrderByWithRelationInput | gameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: gameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` games from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` games.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned games
    **/
    _count?: true | GameCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GameAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GameSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GameMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GameMaxAggregateInputType
  }

  export type GetGameAggregateType<T extends GameAggregateArgs> = {
        [P in keyof T & keyof AggregateGame]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGame[P]>
      : GetScalarType<T[P], AggregateGame[P]>
  }




  export type gameGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: gameWhereInput
    orderBy?: gameOrderByWithAggregationInput | gameOrderByWithAggregationInput[]
    by: GameScalarFieldEnum[] | GameScalarFieldEnum
    having?: gameScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GameCountAggregateInputType | true
    _avg?: GameAvgAggregateInputType
    _sum?: GameSumAggregateInputType
    _min?: GameMinAggregateInputType
    _max?: GameMaxAggregateInputType
  }

  export type GameGroupByOutputType = {
    id: number
    name: string
    short_name: string
    day_h: number
    day_1: number
    day_3: number
    day_7: number
    day_15: number
    day_30: number
    day_p: number
    download_src: string
    img_src: string
    hack_img_scr: string
    status: string
    detail: string
    game_src: string
    visible: number
    youtube_link: string | null
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: GameCountAggregateOutputType | null
    _avg: GameAvgAggregateOutputType | null
    _sum: GameSumAggregateOutputType | null
    _min: GameMinAggregateOutputType | null
    _max: GameMaxAggregateOutputType | null
  }

  type GetGameGroupByPayload<T extends gameGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GameGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GameGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GameGroupByOutputType[P]>
            : GetScalarType<T[P], GameGroupByOutputType[P]>
        }
      >
    >


  export type gameSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    short_name?: boolean
    day_h?: boolean
    day_1?: boolean
    day_3?: boolean
    day_7?: boolean
    day_15?: boolean
    day_30?: boolean
    day_p?: boolean
    download_src?: boolean
    img_src?: boolean
    hack_img_scr?: boolean
    status?: boolean
    detail?: boolean
    game_src?: boolean
    visible?: boolean
    youtube_link?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    buy_log?: boolean | game$buy_logArgs<ExtArgs>
    game_act?: boolean | game$game_actArgs<ExtArgs>
    _count?: boolean | GameCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["game"]>


  export type gameSelectScalar = {
    id?: boolean
    name?: boolean
    short_name?: boolean
    day_h?: boolean
    day_1?: boolean
    day_3?: boolean
    day_7?: boolean
    day_15?: boolean
    day_30?: boolean
    day_p?: boolean
    download_src?: boolean
    img_src?: boolean
    hack_img_scr?: boolean
    status?: boolean
    detail?: boolean
    game_src?: boolean
    visible?: boolean
    youtube_link?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type gameOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "short_name" | "day_h" | "day_1" | "day_3" | "day_7" | "day_15" | "day_30" | "day_p" | "download_src" | "img_src" | "hack_img_scr" | "status" | "detail" | "game_src" | "visible" | "youtube_link" | "isActive" | "createdAt" | "updatedAt", ExtArgs["result"]["game"]>
  export type gameInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    buy_log?: boolean | game$buy_logArgs<ExtArgs>
    game_act?: boolean | game$game_actArgs<ExtArgs>
    _count?: boolean | GameCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $gamePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "game"
    objects: {
      buy_log: Prisma.$buy_logPayload<ExtArgs>[]
      game_act: Prisma.$game_actPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      short_name: string
      day_h: number
      day_1: number
      day_3: number
      day_7: number
      day_15: number
      day_30: number
      day_p: number
      download_src: string
      img_src: string
      hack_img_scr: string
      status: string
      detail: string
      game_src: string
      visible: number
      youtube_link: string | null
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["game"]>
    composites: {}
  }

  type gameGetPayload<S extends boolean | null | undefined | gameDefaultArgs> = $Result.GetResult<Prisma.$gamePayload, S>

  type gameCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<gameFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: GameCountAggregateInputType | true
    }

  export interface gameDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['game'], meta: { name: 'game' } }
    /**
     * Find zero or one Game that matches the filter.
     * @param {gameFindUniqueArgs} args - Arguments to find a Game
     * @example
     * // Get one Game
     * const game = await prisma.game.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends gameFindUniqueArgs>(args: SelectSubset<T, gameFindUniqueArgs<ExtArgs>>): Prisma__gameClient<$Result.GetResult<Prisma.$gamePayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Game that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {gameFindUniqueOrThrowArgs} args - Arguments to find a Game
     * @example
     * // Get one Game
     * const game = await prisma.game.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends gameFindUniqueOrThrowArgs>(args: SelectSubset<T, gameFindUniqueOrThrowArgs<ExtArgs>>): Prisma__gameClient<$Result.GetResult<Prisma.$gamePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Game that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {gameFindFirstArgs} args - Arguments to find a Game
     * @example
     * // Get one Game
     * const game = await prisma.game.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends gameFindFirstArgs>(args?: SelectSubset<T, gameFindFirstArgs<ExtArgs>>): Prisma__gameClient<$Result.GetResult<Prisma.$gamePayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Game that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {gameFindFirstOrThrowArgs} args - Arguments to find a Game
     * @example
     * // Get one Game
     * const game = await prisma.game.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends gameFindFirstOrThrowArgs>(args?: SelectSubset<T, gameFindFirstOrThrowArgs<ExtArgs>>): Prisma__gameClient<$Result.GetResult<Prisma.$gamePayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Games that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {gameFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Games
     * const games = await prisma.game.findMany()
     * 
     * // Get first 10 Games
     * const games = await prisma.game.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const gameWithIdOnly = await prisma.game.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends gameFindManyArgs>(args?: SelectSubset<T, gameFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$gamePayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Game.
     * @param {gameCreateArgs} args - Arguments to create a Game.
     * @example
     * // Create one Game
     * const Game = await prisma.game.create({
     *   data: {
     *     // ... data to create a Game
     *   }
     * })
     * 
     */
    create<T extends gameCreateArgs>(args: SelectSubset<T, gameCreateArgs<ExtArgs>>): Prisma__gameClient<$Result.GetResult<Prisma.$gamePayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Games.
     * @param {gameCreateManyArgs} args - Arguments to create many Games.
     * @example
     * // Create many Games
     * const game = await prisma.game.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends gameCreateManyArgs>(args?: SelectSubset<T, gameCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Game.
     * @param {gameDeleteArgs} args - Arguments to delete one Game.
     * @example
     * // Delete one Game
     * const Game = await prisma.game.delete({
     *   where: {
     *     // ... filter to delete one Game
     *   }
     * })
     * 
     */
    delete<T extends gameDeleteArgs>(args: SelectSubset<T, gameDeleteArgs<ExtArgs>>): Prisma__gameClient<$Result.GetResult<Prisma.$gamePayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Game.
     * @param {gameUpdateArgs} args - Arguments to update one Game.
     * @example
     * // Update one Game
     * const game = await prisma.game.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends gameUpdateArgs>(args: SelectSubset<T, gameUpdateArgs<ExtArgs>>): Prisma__gameClient<$Result.GetResult<Prisma.$gamePayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Games.
     * @param {gameDeleteManyArgs} args - Arguments to filter Games to delete.
     * @example
     * // Delete a few Games
     * const { count } = await prisma.game.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends gameDeleteManyArgs>(args?: SelectSubset<T, gameDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Games.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {gameUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Games
     * const game = await prisma.game.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends gameUpdateManyArgs>(args: SelectSubset<T, gameUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Game.
     * @param {gameUpsertArgs} args - Arguments to update or create a Game.
     * @example
     * // Update or create a Game
     * const game = await prisma.game.upsert({
     *   create: {
     *     // ... data to create a Game
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Game we want to update
     *   }
     * })
     */
    upsert<T extends gameUpsertArgs>(args: SelectSubset<T, gameUpsertArgs<ExtArgs>>): Prisma__gameClient<$Result.GetResult<Prisma.$gamePayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Games.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {gameCountArgs} args - Arguments to filter Games to count.
     * @example
     * // Count the number of Games
     * const count = await prisma.game.count({
     *   where: {
     *     // ... the filter for the Games we want to count
     *   }
     * })
    **/
    count<T extends gameCountArgs>(
      args?: Subset<T, gameCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GameCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Game.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GameAggregateArgs>(args: Subset<T, GameAggregateArgs>): Prisma.PrismaPromise<GetGameAggregateType<T>>

    /**
     * Group by Game.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {gameGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends gameGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: gameGroupByArgs['orderBy'] }
        : { orderBy?: gameGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, gameGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGameGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the game model
   */
  readonly fields: gameFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for game.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__gameClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    buy_log<T extends game$buy_logArgs<ExtArgs> = {}>(args?: Subset<T, game$buy_logArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$buy_logPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    game_act<T extends game$game_actArgs<ExtArgs> = {}>(args?: Subset<T, game$game_actArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$game_actPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the game model
   */ 
  interface gameFieldRefs {
    readonly id: FieldRef<"game", 'Int'>
    readonly name: FieldRef<"game", 'String'>
    readonly short_name: FieldRef<"game", 'String'>
    readonly day_h: FieldRef<"game", 'Int'>
    readonly day_1: FieldRef<"game", 'Int'>
    readonly day_3: FieldRef<"game", 'Int'>
    readonly day_7: FieldRef<"game", 'Int'>
    readonly day_15: FieldRef<"game", 'Int'>
    readonly day_30: FieldRef<"game", 'Int'>
    readonly day_p: FieldRef<"game", 'Int'>
    readonly download_src: FieldRef<"game", 'String'>
    readonly img_src: FieldRef<"game", 'String'>
    readonly hack_img_scr: FieldRef<"game", 'String'>
    readonly status: FieldRef<"game", 'String'>
    readonly detail: FieldRef<"game", 'String'>
    readonly game_src: FieldRef<"game", 'String'>
    readonly visible: FieldRef<"game", 'Int'>
    readonly youtube_link: FieldRef<"game", 'String'>
    readonly isActive: FieldRef<"game", 'Boolean'>
    readonly createdAt: FieldRef<"game", 'DateTime'>
    readonly updatedAt: FieldRef<"game", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * game findUnique
   */
  export type gameFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the game
     */
    select?: gameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the game
     */
    omit?: gameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: gameInclude<ExtArgs> | null
    /**
     * Filter, which game to fetch.
     */
    where: gameWhereUniqueInput
  }

  /**
   * game findUniqueOrThrow
   */
  export type gameFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the game
     */
    select?: gameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the game
     */
    omit?: gameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: gameInclude<ExtArgs> | null
    /**
     * Filter, which game to fetch.
     */
    where: gameWhereUniqueInput
  }

  /**
   * game findFirst
   */
  export type gameFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the game
     */
    select?: gameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the game
     */
    omit?: gameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: gameInclude<ExtArgs> | null
    /**
     * Filter, which game to fetch.
     */
    where?: gameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of games to fetch.
     */
    orderBy?: gameOrderByWithRelationInput | gameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for games.
     */
    cursor?: gameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` games from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` games.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of games.
     */
    distinct?: GameScalarFieldEnum | GameScalarFieldEnum[]
  }

  /**
   * game findFirstOrThrow
   */
  export type gameFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the game
     */
    select?: gameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the game
     */
    omit?: gameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: gameInclude<ExtArgs> | null
    /**
     * Filter, which game to fetch.
     */
    where?: gameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of games to fetch.
     */
    orderBy?: gameOrderByWithRelationInput | gameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for games.
     */
    cursor?: gameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` games from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` games.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of games.
     */
    distinct?: GameScalarFieldEnum | GameScalarFieldEnum[]
  }

  /**
   * game findMany
   */
  export type gameFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the game
     */
    select?: gameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the game
     */
    omit?: gameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: gameInclude<ExtArgs> | null
    /**
     * Filter, which games to fetch.
     */
    where?: gameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of games to fetch.
     */
    orderBy?: gameOrderByWithRelationInput | gameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing games.
     */
    cursor?: gameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` games from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` games.
     */
    skip?: number
    distinct?: GameScalarFieldEnum | GameScalarFieldEnum[]
  }

  /**
   * game create
   */
  export type gameCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the game
     */
    select?: gameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the game
     */
    omit?: gameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: gameInclude<ExtArgs> | null
    /**
     * The data needed to create a game.
     */
    data: XOR<gameCreateInput, gameUncheckedCreateInput>
  }

  /**
   * game createMany
   */
  export type gameCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many games.
     */
    data: gameCreateManyInput | gameCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * game update
   */
  export type gameUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the game
     */
    select?: gameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the game
     */
    omit?: gameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: gameInclude<ExtArgs> | null
    /**
     * The data needed to update a game.
     */
    data: XOR<gameUpdateInput, gameUncheckedUpdateInput>
    /**
     * Choose, which game to update.
     */
    where: gameWhereUniqueInput
  }

  /**
   * game updateMany
   */
  export type gameUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update games.
     */
    data: XOR<gameUpdateManyMutationInput, gameUncheckedUpdateManyInput>
    /**
     * Filter which games to update
     */
    where?: gameWhereInput
  }

  /**
   * game upsert
   */
  export type gameUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the game
     */
    select?: gameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the game
     */
    omit?: gameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: gameInclude<ExtArgs> | null
    /**
     * The filter to search for the game to update in case it exists.
     */
    where: gameWhereUniqueInput
    /**
     * In case the game found by the `where` argument doesn't exist, create a new game with this data.
     */
    create: XOR<gameCreateInput, gameUncheckedCreateInput>
    /**
     * In case the game was found with the provided `where` argument, update it with this data.
     */
    update: XOR<gameUpdateInput, gameUncheckedUpdateInput>
  }

  /**
   * game delete
   */
  export type gameDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the game
     */
    select?: gameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the game
     */
    omit?: gameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: gameInclude<ExtArgs> | null
    /**
     * Filter which game to delete.
     */
    where: gameWhereUniqueInput
  }

  /**
   * game deleteMany
   */
  export type gameDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which games to delete
     */
    where?: gameWhereInput
  }

  /**
   * game.buy_log
   */
  export type game$buy_logArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the buy_log
     */
    select?: buy_logSelect<ExtArgs> | null
    /**
     * Omit specific fields from the buy_log
     */
    omit?: buy_logOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: buy_logInclude<ExtArgs> | null
    where?: buy_logWhereInput
    orderBy?: buy_logOrderByWithRelationInput | buy_logOrderByWithRelationInput[]
    cursor?: buy_logWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Buy_logScalarFieldEnum | Buy_logScalarFieldEnum[]
  }

  /**
   * game.game_act
   */
  export type game$game_actArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the game_act
     */
    select?: game_actSelect<ExtArgs> | null
    /**
     * Omit specific fields from the game_act
     */
    omit?: game_actOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: game_actInclude<ExtArgs> | null
    where?: game_actWhereInput
    orderBy?: game_actOrderByWithRelationInput | game_actOrderByWithRelationInput[]
    cursor?: game_actWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Game_actScalarFieldEnum | Game_actScalarFieldEnum[]
  }

  /**
   * game without action
   */
  export type gameDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the game
     */
    select?: gameSelect<ExtArgs> | null
    /**
     * Omit specific fields from the game
     */
    omit?: gameOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: gameInclude<ExtArgs> | null
  }


  /**
   * Model game_act
   */

  export type AggregateGame_act = {
    _count: Game_actCountAggregateOutputType | null
    _avg: Game_actAvgAggregateOutputType | null
    _sum: Game_actSumAggregateOutputType | null
    _min: Game_actMinAggregateOutputType | null
    _max: Game_actMaxAggregateOutputType | null
  }

  export type Game_actAvgAggregateOutputType = {
    id: number | null
    user_id: number | null
    game_id: number | null
    exp_date: number | null
    last_update: number | null
  }

  export type Game_actSumAggregateOutputType = {
    id: number | null
    user_id: number | null
    game_id: number | null
    exp_date: number | null
    last_update: number | null
  }

  export type Game_actMinAggregateOutputType = {
    id: number | null
    user_id: number | null
    game_id: number | null
    exp_date: number | null
    last_update: number | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type Game_actMaxAggregateOutputType = {
    id: number | null
    user_id: number | null
    game_id: number | null
    exp_date: number | null
    last_update: number | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type Game_actCountAggregateOutputType = {
    id: number
    user_id: number
    game_id: number
    exp_date: number
    last_update: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type Game_actAvgAggregateInputType = {
    id?: true
    user_id?: true
    game_id?: true
    exp_date?: true
    last_update?: true
  }

  export type Game_actSumAggregateInputType = {
    id?: true
    user_id?: true
    game_id?: true
    exp_date?: true
    last_update?: true
  }

  export type Game_actMinAggregateInputType = {
    id?: true
    user_id?: true
    game_id?: true
    exp_date?: true
    last_update?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type Game_actMaxAggregateInputType = {
    id?: true
    user_id?: true
    game_id?: true
    exp_date?: true
    last_update?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type Game_actCountAggregateInputType = {
    id?: true
    user_id?: true
    game_id?: true
    exp_date?: true
    last_update?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type Game_actAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which game_act to aggregate.
     */
    where?: game_actWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of game_acts to fetch.
     */
    orderBy?: game_actOrderByWithRelationInput | game_actOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: game_actWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` game_acts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` game_acts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned game_acts
    **/
    _count?: true | Game_actCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Game_actAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Game_actSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Game_actMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Game_actMaxAggregateInputType
  }

  export type GetGame_actAggregateType<T extends Game_actAggregateArgs> = {
        [P in keyof T & keyof AggregateGame_act]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGame_act[P]>
      : GetScalarType<T[P], AggregateGame_act[P]>
  }




  export type game_actGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: game_actWhereInput
    orderBy?: game_actOrderByWithAggregationInput | game_actOrderByWithAggregationInput[]
    by: Game_actScalarFieldEnum[] | Game_actScalarFieldEnum
    having?: game_actScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Game_actCountAggregateInputType | true
    _avg?: Game_actAvgAggregateInputType
    _sum?: Game_actSumAggregateInputType
    _min?: Game_actMinAggregateInputType
    _max?: Game_actMaxAggregateInputType
  }

  export type Game_actGroupByOutputType = {
    id: number
    user_id: number
    game_id: number
    exp_date: number
    last_update: number | null
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: Game_actCountAggregateOutputType | null
    _avg: Game_actAvgAggregateOutputType | null
    _sum: Game_actSumAggregateOutputType | null
    _min: Game_actMinAggregateOutputType | null
    _max: Game_actMaxAggregateOutputType | null
  }

  type GetGame_actGroupByPayload<T extends game_actGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Game_actGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Game_actGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Game_actGroupByOutputType[P]>
            : GetScalarType<T[P], Game_actGroupByOutputType[P]>
        }
      >
    >


  export type game_actSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    game_id?: boolean
    exp_date?: boolean
    last_update?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    users?: boolean | usersDefaultArgs<ExtArgs>
    game?: boolean | gameDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["game_act"]>


  export type game_actSelectScalar = {
    id?: boolean
    user_id?: boolean
    game_id?: boolean
    exp_date?: boolean
    last_update?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type game_actOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "user_id" | "game_id" | "exp_date" | "last_update" | "isActive" | "createdAt" | "updatedAt", ExtArgs["result"]["game_act"]>
  export type game_actInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | usersDefaultArgs<ExtArgs>
    game?: boolean | gameDefaultArgs<ExtArgs>
  }

  export type $game_actPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "game_act"
    objects: {
      users: Prisma.$usersPayload<ExtArgs>
      game: Prisma.$gamePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      user_id: number
      game_id: number
      exp_date: number
      last_update: number | null
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["game_act"]>
    composites: {}
  }

  type game_actGetPayload<S extends boolean | null | undefined | game_actDefaultArgs> = $Result.GetResult<Prisma.$game_actPayload, S>

  type game_actCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<game_actFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Game_actCountAggregateInputType | true
    }

  export interface game_actDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['game_act'], meta: { name: 'game_act' } }
    /**
     * Find zero or one Game_act that matches the filter.
     * @param {game_actFindUniqueArgs} args - Arguments to find a Game_act
     * @example
     * // Get one Game_act
     * const game_act = await prisma.game_act.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends game_actFindUniqueArgs>(args: SelectSubset<T, game_actFindUniqueArgs<ExtArgs>>): Prisma__game_actClient<$Result.GetResult<Prisma.$game_actPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Game_act that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {game_actFindUniqueOrThrowArgs} args - Arguments to find a Game_act
     * @example
     * // Get one Game_act
     * const game_act = await prisma.game_act.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends game_actFindUniqueOrThrowArgs>(args: SelectSubset<T, game_actFindUniqueOrThrowArgs<ExtArgs>>): Prisma__game_actClient<$Result.GetResult<Prisma.$game_actPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Game_act that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {game_actFindFirstArgs} args - Arguments to find a Game_act
     * @example
     * // Get one Game_act
     * const game_act = await prisma.game_act.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends game_actFindFirstArgs>(args?: SelectSubset<T, game_actFindFirstArgs<ExtArgs>>): Prisma__game_actClient<$Result.GetResult<Prisma.$game_actPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Game_act that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {game_actFindFirstOrThrowArgs} args - Arguments to find a Game_act
     * @example
     * // Get one Game_act
     * const game_act = await prisma.game_act.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends game_actFindFirstOrThrowArgs>(args?: SelectSubset<T, game_actFindFirstOrThrowArgs<ExtArgs>>): Prisma__game_actClient<$Result.GetResult<Prisma.$game_actPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Game_acts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {game_actFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Game_acts
     * const game_acts = await prisma.game_act.findMany()
     * 
     * // Get first 10 Game_acts
     * const game_acts = await prisma.game_act.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const game_actWithIdOnly = await prisma.game_act.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends game_actFindManyArgs>(args?: SelectSubset<T, game_actFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$game_actPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Game_act.
     * @param {game_actCreateArgs} args - Arguments to create a Game_act.
     * @example
     * // Create one Game_act
     * const Game_act = await prisma.game_act.create({
     *   data: {
     *     // ... data to create a Game_act
     *   }
     * })
     * 
     */
    create<T extends game_actCreateArgs>(args: SelectSubset<T, game_actCreateArgs<ExtArgs>>): Prisma__game_actClient<$Result.GetResult<Prisma.$game_actPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Game_acts.
     * @param {game_actCreateManyArgs} args - Arguments to create many Game_acts.
     * @example
     * // Create many Game_acts
     * const game_act = await prisma.game_act.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends game_actCreateManyArgs>(args?: SelectSubset<T, game_actCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Game_act.
     * @param {game_actDeleteArgs} args - Arguments to delete one Game_act.
     * @example
     * // Delete one Game_act
     * const Game_act = await prisma.game_act.delete({
     *   where: {
     *     // ... filter to delete one Game_act
     *   }
     * })
     * 
     */
    delete<T extends game_actDeleteArgs>(args: SelectSubset<T, game_actDeleteArgs<ExtArgs>>): Prisma__game_actClient<$Result.GetResult<Prisma.$game_actPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Game_act.
     * @param {game_actUpdateArgs} args - Arguments to update one Game_act.
     * @example
     * // Update one Game_act
     * const game_act = await prisma.game_act.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends game_actUpdateArgs>(args: SelectSubset<T, game_actUpdateArgs<ExtArgs>>): Prisma__game_actClient<$Result.GetResult<Prisma.$game_actPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Game_acts.
     * @param {game_actDeleteManyArgs} args - Arguments to filter Game_acts to delete.
     * @example
     * // Delete a few Game_acts
     * const { count } = await prisma.game_act.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends game_actDeleteManyArgs>(args?: SelectSubset<T, game_actDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Game_acts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {game_actUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Game_acts
     * const game_act = await prisma.game_act.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends game_actUpdateManyArgs>(args: SelectSubset<T, game_actUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Game_act.
     * @param {game_actUpsertArgs} args - Arguments to update or create a Game_act.
     * @example
     * // Update or create a Game_act
     * const game_act = await prisma.game_act.upsert({
     *   create: {
     *     // ... data to create a Game_act
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Game_act we want to update
     *   }
     * })
     */
    upsert<T extends game_actUpsertArgs>(args: SelectSubset<T, game_actUpsertArgs<ExtArgs>>): Prisma__game_actClient<$Result.GetResult<Prisma.$game_actPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Game_acts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {game_actCountArgs} args - Arguments to filter Game_acts to count.
     * @example
     * // Count the number of Game_acts
     * const count = await prisma.game_act.count({
     *   where: {
     *     // ... the filter for the Game_acts we want to count
     *   }
     * })
    **/
    count<T extends game_actCountArgs>(
      args?: Subset<T, game_actCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Game_actCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Game_act.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Game_actAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Game_actAggregateArgs>(args: Subset<T, Game_actAggregateArgs>): Prisma.PrismaPromise<GetGame_actAggregateType<T>>

    /**
     * Group by Game_act.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {game_actGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends game_actGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: game_actGroupByArgs['orderBy'] }
        : { orderBy?: game_actGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, game_actGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGame_actGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the game_act model
   */
  readonly fields: game_actFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for game_act.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__game_actClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    users<T extends usersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, usersDefaultArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    game<T extends gameDefaultArgs<ExtArgs> = {}>(args?: Subset<T, gameDefaultArgs<ExtArgs>>): Prisma__gameClient<$Result.GetResult<Prisma.$gamePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the game_act model
   */ 
  interface game_actFieldRefs {
    readonly id: FieldRef<"game_act", 'Int'>
    readonly user_id: FieldRef<"game_act", 'Int'>
    readonly game_id: FieldRef<"game_act", 'Int'>
    readonly exp_date: FieldRef<"game_act", 'Int'>
    readonly last_update: FieldRef<"game_act", 'Int'>
    readonly isActive: FieldRef<"game_act", 'Boolean'>
    readonly createdAt: FieldRef<"game_act", 'DateTime'>
    readonly updatedAt: FieldRef<"game_act", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * game_act findUnique
   */
  export type game_actFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the game_act
     */
    select?: game_actSelect<ExtArgs> | null
    /**
     * Omit specific fields from the game_act
     */
    omit?: game_actOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: game_actInclude<ExtArgs> | null
    /**
     * Filter, which game_act to fetch.
     */
    where: game_actWhereUniqueInput
  }

  /**
   * game_act findUniqueOrThrow
   */
  export type game_actFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the game_act
     */
    select?: game_actSelect<ExtArgs> | null
    /**
     * Omit specific fields from the game_act
     */
    omit?: game_actOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: game_actInclude<ExtArgs> | null
    /**
     * Filter, which game_act to fetch.
     */
    where: game_actWhereUniqueInput
  }

  /**
   * game_act findFirst
   */
  export type game_actFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the game_act
     */
    select?: game_actSelect<ExtArgs> | null
    /**
     * Omit specific fields from the game_act
     */
    omit?: game_actOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: game_actInclude<ExtArgs> | null
    /**
     * Filter, which game_act to fetch.
     */
    where?: game_actWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of game_acts to fetch.
     */
    orderBy?: game_actOrderByWithRelationInput | game_actOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for game_acts.
     */
    cursor?: game_actWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` game_acts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` game_acts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of game_acts.
     */
    distinct?: Game_actScalarFieldEnum | Game_actScalarFieldEnum[]
  }

  /**
   * game_act findFirstOrThrow
   */
  export type game_actFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the game_act
     */
    select?: game_actSelect<ExtArgs> | null
    /**
     * Omit specific fields from the game_act
     */
    omit?: game_actOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: game_actInclude<ExtArgs> | null
    /**
     * Filter, which game_act to fetch.
     */
    where?: game_actWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of game_acts to fetch.
     */
    orderBy?: game_actOrderByWithRelationInput | game_actOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for game_acts.
     */
    cursor?: game_actWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` game_acts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` game_acts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of game_acts.
     */
    distinct?: Game_actScalarFieldEnum | Game_actScalarFieldEnum[]
  }

  /**
   * game_act findMany
   */
  export type game_actFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the game_act
     */
    select?: game_actSelect<ExtArgs> | null
    /**
     * Omit specific fields from the game_act
     */
    omit?: game_actOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: game_actInclude<ExtArgs> | null
    /**
     * Filter, which game_acts to fetch.
     */
    where?: game_actWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of game_acts to fetch.
     */
    orderBy?: game_actOrderByWithRelationInput | game_actOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing game_acts.
     */
    cursor?: game_actWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` game_acts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` game_acts.
     */
    skip?: number
    distinct?: Game_actScalarFieldEnum | Game_actScalarFieldEnum[]
  }

  /**
   * game_act create
   */
  export type game_actCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the game_act
     */
    select?: game_actSelect<ExtArgs> | null
    /**
     * Omit specific fields from the game_act
     */
    omit?: game_actOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: game_actInclude<ExtArgs> | null
    /**
     * The data needed to create a game_act.
     */
    data: XOR<game_actCreateInput, game_actUncheckedCreateInput>
  }

  /**
   * game_act createMany
   */
  export type game_actCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many game_acts.
     */
    data: game_actCreateManyInput | game_actCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * game_act update
   */
  export type game_actUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the game_act
     */
    select?: game_actSelect<ExtArgs> | null
    /**
     * Omit specific fields from the game_act
     */
    omit?: game_actOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: game_actInclude<ExtArgs> | null
    /**
     * The data needed to update a game_act.
     */
    data: XOR<game_actUpdateInput, game_actUncheckedUpdateInput>
    /**
     * Choose, which game_act to update.
     */
    where: game_actWhereUniqueInput
  }

  /**
   * game_act updateMany
   */
  export type game_actUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update game_acts.
     */
    data: XOR<game_actUpdateManyMutationInput, game_actUncheckedUpdateManyInput>
    /**
     * Filter which game_acts to update
     */
    where?: game_actWhereInput
  }

  /**
   * game_act upsert
   */
  export type game_actUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the game_act
     */
    select?: game_actSelect<ExtArgs> | null
    /**
     * Omit specific fields from the game_act
     */
    omit?: game_actOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: game_actInclude<ExtArgs> | null
    /**
     * The filter to search for the game_act to update in case it exists.
     */
    where: game_actWhereUniqueInput
    /**
     * In case the game_act found by the `where` argument doesn't exist, create a new game_act with this data.
     */
    create: XOR<game_actCreateInput, game_actUncheckedCreateInput>
    /**
     * In case the game_act was found with the provided `where` argument, update it with this data.
     */
    update: XOR<game_actUpdateInput, game_actUncheckedUpdateInput>
  }

  /**
   * game_act delete
   */
  export type game_actDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the game_act
     */
    select?: game_actSelect<ExtArgs> | null
    /**
     * Omit specific fields from the game_act
     */
    omit?: game_actOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: game_actInclude<ExtArgs> | null
    /**
     * Filter which game_act to delete.
     */
    where: game_actWhereUniqueInput
  }

  /**
   * game_act deleteMany
   */
  export type game_actDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which game_acts to delete
     */
    where?: game_actWhereInput
  }

  /**
   * game_act without action
   */
  export type game_actDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the game_act
     */
    select?: game_actSelect<ExtArgs> | null
    /**
     * Omit specific fields from the game_act
     */
    omit?: game_actOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: game_actInclude<ExtArgs> | null
  }


  /**
   * Model redeem_log
   */

  export type AggregateRedeem_log = {
    _count: Redeem_logCountAggregateOutputType | null
    _avg: Redeem_logAvgAggregateOutputType | null
    _sum: Redeem_logSumAggregateOutputType | null
    _min: Redeem_logMinAggregateOutputType | null
    _max: Redeem_logMaxAggregateOutputType | null
  }

  export type Redeem_logAvgAggregateOutputType = {
    id: number | null
    user_id: number | null
    redeem_amount: number | null
    time: number | null
  }

  export type Redeem_logSumAggregateOutputType = {
    id: number | null
    user_id: number | null
    redeem_amount: number | null
    time: number | null
  }

  export type Redeem_logMinAggregateOutputType = {
    id: number | null
    user_id: number | null
    redeem_amount: number | null
    time: number | null
    link: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type Redeem_logMaxAggregateOutputType = {
    id: number | null
    user_id: number | null
    redeem_amount: number | null
    time: number | null
    link: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type Redeem_logCountAggregateOutputType = {
    id: number
    user_id: number
    redeem_amount: number
    time: number
    link: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type Redeem_logAvgAggregateInputType = {
    id?: true
    user_id?: true
    redeem_amount?: true
    time?: true
  }

  export type Redeem_logSumAggregateInputType = {
    id?: true
    user_id?: true
    redeem_amount?: true
    time?: true
  }

  export type Redeem_logMinAggregateInputType = {
    id?: true
    user_id?: true
    redeem_amount?: true
    time?: true
    link?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type Redeem_logMaxAggregateInputType = {
    id?: true
    user_id?: true
    redeem_amount?: true
    time?: true
    link?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type Redeem_logCountAggregateInputType = {
    id?: true
    user_id?: true
    redeem_amount?: true
    time?: true
    link?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type Redeem_logAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which redeem_log to aggregate.
     */
    where?: redeem_logWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of redeem_logs to fetch.
     */
    orderBy?: redeem_logOrderByWithRelationInput | redeem_logOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: redeem_logWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` redeem_logs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` redeem_logs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned redeem_logs
    **/
    _count?: true | Redeem_logCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Redeem_logAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Redeem_logSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Redeem_logMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Redeem_logMaxAggregateInputType
  }

  export type GetRedeem_logAggregateType<T extends Redeem_logAggregateArgs> = {
        [P in keyof T & keyof AggregateRedeem_log]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRedeem_log[P]>
      : GetScalarType<T[P], AggregateRedeem_log[P]>
  }




  export type redeem_logGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: redeem_logWhereInput
    orderBy?: redeem_logOrderByWithAggregationInput | redeem_logOrderByWithAggregationInput[]
    by: Redeem_logScalarFieldEnum[] | Redeem_logScalarFieldEnum
    having?: redeem_logScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Redeem_logCountAggregateInputType | true
    _avg?: Redeem_logAvgAggregateInputType
    _sum?: Redeem_logSumAggregateInputType
    _min?: Redeem_logMinAggregateInputType
    _max?: Redeem_logMaxAggregateInputType
  }

  export type Redeem_logGroupByOutputType = {
    id: number
    user_id: number
    redeem_amount: number
    time: number | null
    link: string | null
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: Redeem_logCountAggregateOutputType | null
    _avg: Redeem_logAvgAggregateOutputType | null
    _sum: Redeem_logSumAggregateOutputType | null
    _min: Redeem_logMinAggregateOutputType | null
    _max: Redeem_logMaxAggregateOutputType | null
  }

  type GetRedeem_logGroupByPayload<T extends redeem_logGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Redeem_logGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Redeem_logGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Redeem_logGroupByOutputType[P]>
            : GetScalarType<T[P], Redeem_logGroupByOutputType[P]>
        }
      >
    >


  export type redeem_logSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    redeem_amount?: boolean
    time?: boolean
    link?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    users?: boolean | usersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["redeem_log"]>


  export type redeem_logSelectScalar = {
    id?: boolean
    user_id?: boolean
    redeem_amount?: boolean
    time?: boolean
    link?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type redeem_logOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "user_id" | "redeem_amount" | "time" | "link" | "isActive" | "createdAt" | "updatedAt", ExtArgs["result"]["redeem_log"]>
  export type redeem_logInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | usersDefaultArgs<ExtArgs>
  }

  export type $redeem_logPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "redeem_log"
    objects: {
      users: Prisma.$usersPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      user_id: number
      redeem_amount: number
      time: number | null
      link: string | null
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["redeem_log"]>
    composites: {}
  }

  type redeem_logGetPayload<S extends boolean | null | undefined | redeem_logDefaultArgs> = $Result.GetResult<Prisma.$redeem_logPayload, S>

  type redeem_logCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<redeem_logFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Redeem_logCountAggregateInputType | true
    }

  export interface redeem_logDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['redeem_log'], meta: { name: 'redeem_log' } }
    /**
     * Find zero or one Redeem_log that matches the filter.
     * @param {redeem_logFindUniqueArgs} args - Arguments to find a Redeem_log
     * @example
     * // Get one Redeem_log
     * const redeem_log = await prisma.redeem_log.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends redeem_logFindUniqueArgs>(args: SelectSubset<T, redeem_logFindUniqueArgs<ExtArgs>>): Prisma__redeem_logClient<$Result.GetResult<Prisma.$redeem_logPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Redeem_log that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {redeem_logFindUniqueOrThrowArgs} args - Arguments to find a Redeem_log
     * @example
     * // Get one Redeem_log
     * const redeem_log = await prisma.redeem_log.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends redeem_logFindUniqueOrThrowArgs>(args: SelectSubset<T, redeem_logFindUniqueOrThrowArgs<ExtArgs>>): Prisma__redeem_logClient<$Result.GetResult<Prisma.$redeem_logPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Redeem_log that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {redeem_logFindFirstArgs} args - Arguments to find a Redeem_log
     * @example
     * // Get one Redeem_log
     * const redeem_log = await prisma.redeem_log.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends redeem_logFindFirstArgs>(args?: SelectSubset<T, redeem_logFindFirstArgs<ExtArgs>>): Prisma__redeem_logClient<$Result.GetResult<Prisma.$redeem_logPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Redeem_log that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {redeem_logFindFirstOrThrowArgs} args - Arguments to find a Redeem_log
     * @example
     * // Get one Redeem_log
     * const redeem_log = await prisma.redeem_log.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends redeem_logFindFirstOrThrowArgs>(args?: SelectSubset<T, redeem_logFindFirstOrThrowArgs<ExtArgs>>): Prisma__redeem_logClient<$Result.GetResult<Prisma.$redeem_logPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Redeem_logs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {redeem_logFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Redeem_logs
     * const redeem_logs = await prisma.redeem_log.findMany()
     * 
     * // Get first 10 Redeem_logs
     * const redeem_logs = await prisma.redeem_log.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const redeem_logWithIdOnly = await prisma.redeem_log.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends redeem_logFindManyArgs>(args?: SelectSubset<T, redeem_logFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$redeem_logPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Redeem_log.
     * @param {redeem_logCreateArgs} args - Arguments to create a Redeem_log.
     * @example
     * // Create one Redeem_log
     * const Redeem_log = await prisma.redeem_log.create({
     *   data: {
     *     // ... data to create a Redeem_log
     *   }
     * })
     * 
     */
    create<T extends redeem_logCreateArgs>(args: SelectSubset<T, redeem_logCreateArgs<ExtArgs>>): Prisma__redeem_logClient<$Result.GetResult<Prisma.$redeem_logPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Redeem_logs.
     * @param {redeem_logCreateManyArgs} args - Arguments to create many Redeem_logs.
     * @example
     * // Create many Redeem_logs
     * const redeem_log = await prisma.redeem_log.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends redeem_logCreateManyArgs>(args?: SelectSubset<T, redeem_logCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Redeem_log.
     * @param {redeem_logDeleteArgs} args - Arguments to delete one Redeem_log.
     * @example
     * // Delete one Redeem_log
     * const Redeem_log = await prisma.redeem_log.delete({
     *   where: {
     *     // ... filter to delete one Redeem_log
     *   }
     * })
     * 
     */
    delete<T extends redeem_logDeleteArgs>(args: SelectSubset<T, redeem_logDeleteArgs<ExtArgs>>): Prisma__redeem_logClient<$Result.GetResult<Prisma.$redeem_logPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Redeem_log.
     * @param {redeem_logUpdateArgs} args - Arguments to update one Redeem_log.
     * @example
     * // Update one Redeem_log
     * const redeem_log = await prisma.redeem_log.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends redeem_logUpdateArgs>(args: SelectSubset<T, redeem_logUpdateArgs<ExtArgs>>): Prisma__redeem_logClient<$Result.GetResult<Prisma.$redeem_logPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Redeem_logs.
     * @param {redeem_logDeleteManyArgs} args - Arguments to filter Redeem_logs to delete.
     * @example
     * // Delete a few Redeem_logs
     * const { count } = await prisma.redeem_log.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends redeem_logDeleteManyArgs>(args?: SelectSubset<T, redeem_logDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Redeem_logs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {redeem_logUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Redeem_logs
     * const redeem_log = await prisma.redeem_log.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends redeem_logUpdateManyArgs>(args: SelectSubset<T, redeem_logUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Redeem_log.
     * @param {redeem_logUpsertArgs} args - Arguments to update or create a Redeem_log.
     * @example
     * // Update or create a Redeem_log
     * const redeem_log = await prisma.redeem_log.upsert({
     *   create: {
     *     // ... data to create a Redeem_log
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Redeem_log we want to update
     *   }
     * })
     */
    upsert<T extends redeem_logUpsertArgs>(args: SelectSubset<T, redeem_logUpsertArgs<ExtArgs>>): Prisma__redeem_logClient<$Result.GetResult<Prisma.$redeem_logPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Redeem_logs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {redeem_logCountArgs} args - Arguments to filter Redeem_logs to count.
     * @example
     * // Count the number of Redeem_logs
     * const count = await prisma.redeem_log.count({
     *   where: {
     *     // ... the filter for the Redeem_logs we want to count
     *   }
     * })
    **/
    count<T extends redeem_logCountArgs>(
      args?: Subset<T, redeem_logCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Redeem_logCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Redeem_log.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Redeem_logAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Redeem_logAggregateArgs>(args: Subset<T, Redeem_logAggregateArgs>): Prisma.PrismaPromise<GetRedeem_logAggregateType<T>>

    /**
     * Group by Redeem_log.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {redeem_logGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends redeem_logGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: redeem_logGroupByArgs['orderBy'] }
        : { orderBy?: redeem_logGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, redeem_logGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRedeem_logGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the redeem_log model
   */
  readonly fields: redeem_logFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for redeem_log.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__redeem_logClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    users<T extends usersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, usersDefaultArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the redeem_log model
   */ 
  interface redeem_logFieldRefs {
    readonly id: FieldRef<"redeem_log", 'Int'>
    readonly user_id: FieldRef<"redeem_log", 'Int'>
    readonly redeem_amount: FieldRef<"redeem_log", 'Int'>
    readonly time: FieldRef<"redeem_log", 'Int'>
    readonly link: FieldRef<"redeem_log", 'String'>
    readonly isActive: FieldRef<"redeem_log", 'Boolean'>
    readonly createdAt: FieldRef<"redeem_log", 'DateTime'>
    readonly updatedAt: FieldRef<"redeem_log", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * redeem_log findUnique
   */
  export type redeem_logFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the redeem_log
     */
    select?: redeem_logSelect<ExtArgs> | null
    /**
     * Omit specific fields from the redeem_log
     */
    omit?: redeem_logOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: redeem_logInclude<ExtArgs> | null
    /**
     * Filter, which redeem_log to fetch.
     */
    where: redeem_logWhereUniqueInput
  }

  /**
   * redeem_log findUniqueOrThrow
   */
  export type redeem_logFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the redeem_log
     */
    select?: redeem_logSelect<ExtArgs> | null
    /**
     * Omit specific fields from the redeem_log
     */
    omit?: redeem_logOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: redeem_logInclude<ExtArgs> | null
    /**
     * Filter, which redeem_log to fetch.
     */
    where: redeem_logWhereUniqueInput
  }

  /**
   * redeem_log findFirst
   */
  export type redeem_logFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the redeem_log
     */
    select?: redeem_logSelect<ExtArgs> | null
    /**
     * Omit specific fields from the redeem_log
     */
    omit?: redeem_logOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: redeem_logInclude<ExtArgs> | null
    /**
     * Filter, which redeem_log to fetch.
     */
    where?: redeem_logWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of redeem_logs to fetch.
     */
    orderBy?: redeem_logOrderByWithRelationInput | redeem_logOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for redeem_logs.
     */
    cursor?: redeem_logWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` redeem_logs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` redeem_logs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of redeem_logs.
     */
    distinct?: Redeem_logScalarFieldEnum | Redeem_logScalarFieldEnum[]
  }

  /**
   * redeem_log findFirstOrThrow
   */
  export type redeem_logFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the redeem_log
     */
    select?: redeem_logSelect<ExtArgs> | null
    /**
     * Omit specific fields from the redeem_log
     */
    omit?: redeem_logOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: redeem_logInclude<ExtArgs> | null
    /**
     * Filter, which redeem_log to fetch.
     */
    where?: redeem_logWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of redeem_logs to fetch.
     */
    orderBy?: redeem_logOrderByWithRelationInput | redeem_logOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for redeem_logs.
     */
    cursor?: redeem_logWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` redeem_logs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` redeem_logs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of redeem_logs.
     */
    distinct?: Redeem_logScalarFieldEnum | Redeem_logScalarFieldEnum[]
  }

  /**
   * redeem_log findMany
   */
  export type redeem_logFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the redeem_log
     */
    select?: redeem_logSelect<ExtArgs> | null
    /**
     * Omit specific fields from the redeem_log
     */
    omit?: redeem_logOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: redeem_logInclude<ExtArgs> | null
    /**
     * Filter, which redeem_logs to fetch.
     */
    where?: redeem_logWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of redeem_logs to fetch.
     */
    orderBy?: redeem_logOrderByWithRelationInput | redeem_logOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing redeem_logs.
     */
    cursor?: redeem_logWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` redeem_logs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` redeem_logs.
     */
    skip?: number
    distinct?: Redeem_logScalarFieldEnum | Redeem_logScalarFieldEnum[]
  }

  /**
   * redeem_log create
   */
  export type redeem_logCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the redeem_log
     */
    select?: redeem_logSelect<ExtArgs> | null
    /**
     * Omit specific fields from the redeem_log
     */
    omit?: redeem_logOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: redeem_logInclude<ExtArgs> | null
    /**
     * The data needed to create a redeem_log.
     */
    data: XOR<redeem_logCreateInput, redeem_logUncheckedCreateInput>
  }

  /**
   * redeem_log createMany
   */
  export type redeem_logCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many redeem_logs.
     */
    data: redeem_logCreateManyInput | redeem_logCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * redeem_log update
   */
  export type redeem_logUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the redeem_log
     */
    select?: redeem_logSelect<ExtArgs> | null
    /**
     * Omit specific fields from the redeem_log
     */
    omit?: redeem_logOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: redeem_logInclude<ExtArgs> | null
    /**
     * The data needed to update a redeem_log.
     */
    data: XOR<redeem_logUpdateInput, redeem_logUncheckedUpdateInput>
    /**
     * Choose, which redeem_log to update.
     */
    where: redeem_logWhereUniqueInput
  }

  /**
   * redeem_log updateMany
   */
  export type redeem_logUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update redeem_logs.
     */
    data: XOR<redeem_logUpdateManyMutationInput, redeem_logUncheckedUpdateManyInput>
    /**
     * Filter which redeem_logs to update
     */
    where?: redeem_logWhereInput
  }

  /**
   * redeem_log upsert
   */
  export type redeem_logUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the redeem_log
     */
    select?: redeem_logSelect<ExtArgs> | null
    /**
     * Omit specific fields from the redeem_log
     */
    omit?: redeem_logOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: redeem_logInclude<ExtArgs> | null
    /**
     * The filter to search for the redeem_log to update in case it exists.
     */
    where: redeem_logWhereUniqueInput
    /**
     * In case the redeem_log found by the `where` argument doesn't exist, create a new redeem_log with this data.
     */
    create: XOR<redeem_logCreateInput, redeem_logUncheckedCreateInput>
    /**
     * In case the redeem_log was found with the provided `where` argument, update it with this data.
     */
    update: XOR<redeem_logUpdateInput, redeem_logUncheckedUpdateInput>
  }

  /**
   * redeem_log delete
   */
  export type redeem_logDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the redeem_log
     */
    select?: redeem_logSelect<ExtArgs> | null
    /**
     * Omit specific fields from the redeem_log
     */
    omit?: redeem_logOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: redeem_logInclude<ExtArgs> | null
    /**
     * Filter which redeem_log to delete.
     */
    where: redeem_logWhereUniqueInput
  }

  /**
   * redeem_log deleteMany
   */
  export type redeem_logDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which redeem_logs to delete
     */
    where?: redeem_logWhereInput
  }

  /**
   * redeem_log without action
   */
  export type redeem_logDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the redeem_log
     */
    select?: redeem_logSelect<ExtArgs> | null
    /**
     * Omit specific fields from the redeem_log
     */
    omit?: redeem_logOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: redeem_logInclude<ExtArgs> | null
  }


  /**
   * Model users
   */

  export type AggregateUsers = {
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  export type UsersAvgAggregateOutputType = {
    id: number | null
    credit: number | null
    role: number | null
  }

  export type UsersSumAggregateOutputType = {
    id: number | null
    credit: number | null
    role: number | null
  }

  export type UsersMinAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    hwid: string | null
    credit: number | null
    role: number | null
    email_verified_at: Date | null
    password: string | null
    remember_token: string | null
    created_at: Date | null
    updated_at: Date | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UsersMaxAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    hwid: string | null
    credit: number | null
    role: number | null
    email_verified_at: Date | null
    password: string | null
    remember_token: string | null
    created_at: Date | null
    updated_at: Date | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UsersCountAggregateOutputType = {
    id: number
    name: number
    email: number
    hwid: number
    credit: number
    role: number
    email_verified_at: number
    password: number
    remember_token: number
    created_at: number
    updated_at: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UsersAvgAggregateInputType = {
    id?: true
    credit?: true
    role?: true
  }

  export type UsersSumAggregateInputType = {
    id?: true
    credit?: true
    role?: true
  }

  export type UsersMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    hwid?: true
    credit?: true
    role?: true
    email_verified_at?: true
    password?: true
    remember_token?: true
    created_at?: true
    updated_at?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UsersMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    hwid?: true
    credit?: true
    role?: true
    email_verified_at?: true
    password?: true
    remember_token?: true
    created_at?: true
    updated_at?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UsersCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    hwid?: true
    credit?: true
    role?: true
    email_verified_at?: true
    password?: true
    remember_token?: true
    created_at?: true
    updated_at?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UsersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to aggregate.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    _count?: true | UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers[P]>
      : GetScalarType<T[P], AggregateUsers[P]>
  }




  export type usersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: usersWhereInput
    orderBy?: usersOrderByWithAggregationInput | usersOrderByWithAggregationInput[]
    by: UsersScalarFieldEnum[] | UsersScalarFieldEnum
    having?: usersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersCountAggregateInputType | true
    _avg?: UsersAvgAggregateInputType
    _sum?: UsersSumAggregateInputType
    _min?: UsersMinAggregateInputType
    _max?: UsersMaxAggregateInputType
  }

  export type UsersGroupByOutputType = {
    id: number
    name: string
    email: string
    hwid: string | null
    credit: number
    role: number
    email_verified_at: Date | null
    password: string
    remember_token: string | null
    created_at: Date | null
    updated_at: Date | null
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  type GetUsersGroupByPayload<T extends usersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersGroupByOutputType[P]>
            : GetScalarType<T[P], UsersGroupByOutputType[P]>
        }
      >
    >


  export type usersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    hwid?: boolean
    credit?: boolean
    role?: boolean
    email_verified_at?: boolean
    password?: boolean
    remember_token?: boolean
    created_at?: boolean
    updated_at?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    buy_log?: boolean | users$buy_logArgs<ExtArgs>
    game_act?: boolean | users$game_actArgs<ExtArgs>
    redeem_log?: boolean | users$redeem_logArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["users"]>


  export type usersSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    hwid?: boolean
    credit?: boolean
    role?: boolean
    email_verified_at?: boolean
    password?: boolean
    remember_token?: boolean
    created_at?: boolean
    updated_at?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type usersOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "email" | "hwid" | "credit" | "role" | "email_verified_at" | "password" | "remember_token" | "created_at" | "updated_at" | "isActive" | "createdAt" | "updatedAt", ExtArgs["result"]["users"]>
  export type usersInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    buy_log?: boolean | users$buy_logArgs<ExtArgs>
    game_act?: boolean | users$game_actArgs<ExtArgs>
    redeem_log?: boolean | users$redeem_logArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $usersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "users"
    objects: {
      buy_log: Prisma.$buy_logPayload<ExtArgs>[]
      game_act: Prisma.$game_actPayload<ExtArgs>[]
      redeem_log: Prisma.$redeem_logPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      email: string
      hwid: string | null
      credit: number
      role: number
      email_verified_at: Date | null
      password: string
      remember_token: string | null
      created_at: Date | null
      updated_at: Date | null
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["users"]>
    composites: {}
  }

  type usersGetPayload<S extends boolean | null | undefined | usersDefaultArgs> = $Result.GetResult<Prisma.$usersPayload, S>

  type usersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<usersFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UsersCountAggregateInputType | true
    }

  export interface usersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['users'], meta: { name: 'users' } }
    /**
     * Find zero or one Users that matches the filter.
     * @param {usersFindUniqueArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends usersFindUniqueArgs>(args: SelectSubset<T, usersFindUniqueArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Users that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {usersFindUniqueOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends usersFindUniqueOrThrowArgs>(args: SelectSubset<T, usersFindUniqueOrThrowArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends usersFindFirstArgs>(args?: SelectSubset<T, usersFindFirstArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Users that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends usersFindFirstOrThrowArgs>(args?: SelectSubset<T, usersFindFirstOrThrowArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usersWithIdOnly = await prisma.users.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends usersFindManyArgs>(args?: SelectSubset<T, usersFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Users.
     * @param {usersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
     */
    create<T extends usersCreateArgs>(args: SelectSubset<T, usersCreateArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Users.
     * @param {usersCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const users = await prisma.users.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends usersCreateManyArgs>(args?: SelectSubset<T, usersCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Users.
     * @param {usersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
     */
    delete<T extends usersDeleteArgs>(args: SelectSubset<T, usersDeleteArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Users.
     * @param {usersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends usersUpdateArgs>(args: SelectSubset<T, usersUpdateArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Users.
     * @param {usersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends usersDeleteManyArgs>(args?: SelectSubset<T, usersDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends usersUpdateManyArgs>(args: SelectSubset<T, usersUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Users.
     * @param {usersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
     */
    upsert<T extends usersUpsertArgs>(args: SelectSubset<T, usersUpsertArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends usersCountArgs>(
      args?: Subset<T, usersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAggregateArgs>(args: Subset<T, UsersAggregateArgs>): Prisma.PrismaPromise<GetUsersAggregateType<T>>

    /**
     * Group by Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends usersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: usersGroupByArgs['orderBy'] }
        : { orderBy?: usersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, usersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the users model
   */
  readonly fields: usersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__usersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    buy_log<T extends users$buy_logArgs<ExtArgs> = {}>(args?: Subset<T, users$buy_logArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$buy_logPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    game_act<T extends users$game_actArgs<ExtArgs> = {}>(args?: Subset<T, users$game_actArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$game_actPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    redeem_log<T extends users$redeem_logArgs<ExtArgs> = {}>(args?: Subset<T, users$redeem_logArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$redeem_logPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the users model
   */ 
  interface usersFieldRefs {
    readonly id: FieldRef<"users", 'Int'>
    readonly name: FieldRef<"users", 'String'>
    readonly email: FieldRef<"users", 'String'>
    readonly hwid: FieldRef<"users", 'String'>
    readonly credit: FieldRef<"users", 'Int'>
    readonly role: FieldRef<"users", 'Int'>
    readonly email_verified_at: FieldRef<"users", 'DateTime'>
    readonly password: FieldRef<"users", 'String'>
    readonly remember_token: FieldRef<"users", 'String'>
    readonly created_at: FieldRef<"users", 'DateTime'>
    readonly updated_at: FieldRef<"users", 'DateTime'>
    readonly isActive: FieldRef<"users", 'Boolean'>
    readonly createdAt: FieldRef<"users", 'DateTime'>
    readonly updatedAt: FieldRef<"users", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * users findUnique
   */
  export type usersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users findUniqueOrThrow
   */
  export type usersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users findFirst
   */
  export type usersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * users findFirstOrThrow
   */
  export type usersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * users findMany
   */
  export type usersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * users create
   */
  export type usersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The data needed to create a users.
     */
    data: XOR<usersCreateInput, usersUncheckedCreateInput>
  }

  /**
   * users createMany
   */
  export type usersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many users.
     */
    data: usersCreateManyInput | usersCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * users update
   */
  export type usersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The data needed to update a users.
     */
    data: XOR<usersUpdateInput, usersUncheckedUpdateInput>
    /**
     * Choose, which users to update.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users updateMany
   */
  export type usersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update users.
     */
    data: XOR<usersUpdateManyMutationInput, usersUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     */
    where?: usersWhereInput
  }

  /**
   * users upsert
   */
  export type usersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The filter to search for the users to update in case it exists.
     */
    where: usersWhereUniqueInput
    /**
     * In case the users found by the `where` argument doesn't exist, create a new users with this data.
     */
    create: XOR<usersCreateInput, usersUncheckedCreateInput>
    /**
     * In case the users was found with the provided `where` argument, update it with this data.
     */
    update: XOR<usersUpdateInput, usersUncheckedUpdateInput>
  }

  /**
   * users delete
   */
  export type usersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter which users to delete.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users deleteMany
   */
  export type usersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to delete
     */
    where?: usersWhereInput
  }

  /**
   * users.buy_log
   */
  export type users$buy_logArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the buy_log
     */
    select?: buy_logSelect<ExtArgs> | null
    /**
     * Omit specific fields from the buy_log
     */
    omit?: buy_logOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: buy_logInclude<ExtArgs> | null
    where?: buy_logWhereInput
    orderBy?: buy_logOrderByWithRelationInput | buy_logOrderByWithRelationInput[]
    cursor?: buy_logWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Buy_logScalarFieldEnum | Buy_logScalarFieldEnum[]
  }

  /**
   * users.game_act
   */
  export type users$game_actArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the game_act
     */
    select?: game_actSelect<ExtArgs> | null
    /**
     * Omit specific fields from the game_act
     */
    omit?: game_actOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: game_actInclude<ExtArgs> | null
    where?: game_actWhereInput
    orderBy?: game_actOrderByWithRelationInput | game_actOrderByWithRelationInput[]
    cursor?: game_actWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Game_actScalarFieldEnum | Game_actScalarFieldEnum[]
  }

  /**
   * users.redeem_log
   */
  export type users$redeem_logArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the redeem_log
     */
    select?: redeem_logSelect<ExtArgs> | null
    /**
     * Omit specific fields from the redeem_log
     */
    omit?: redeem_logOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: redeem_logInclude<ExtArgs> | null
    where?: redeem_logWhereInput
    orderBy?: redeem_logOrderByWithRelationInput | redeem_logOrderByWithRelationInput[]
    cursor?: redeem_logWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Redeem_logScalarFieldEnum | Redeem_logScalarFieldEnum[]
  }

  /**
   * users without action
   */
  export type usersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
  }


  /**
   * Model setup
   */

  export type AggregateSetup = {
    _count: SetupCountAggregateOutputType | null
    _avg: SetupAvgAggregateOutputType | null
    _sum: SetupSumAggregateOutputType | null
    _min: SetupMinAggregateOutputType | null
    _max: SetupMaxAggregateOutputType | null
  }

  export type SetupAvgAggregateOutputType = {
    id: number | null
  }

  export type SetupSumAggregateOutputType = {
    id: number | null
  }

  export type SetupMinAggregateOutputType = {
    id: number | null
    trueGiftPhone: string | null
    reCaptchaGoogle: string | null
    updatedAt: Date | null
  }

  export type SetupMaxAggregateOutputType = {
    id: number | null
    trueGiftPhone: string | null
    reCaptchaGoogle: string | null
    updatedAt: Date | null
  }

  export type SetupCountAggregateOutputType = {
    id: number
    trueGiftPhone: number
    reCaptchaGoogle: number
    updatedAt: number
    _all: number
  }


  export type SetupAvgAggregateInputType = {
    id?: true
  }

  export type SetupSumAggregateInputType = {
    id?: true
  }

  export type SetupMinAggregateInputType = {
    id?: true
    trueGiftPhone?: true
    reCaptchaGoogle?: true
    updatedAt?: true
  }

  export type SetupMaxAggregateInputType = {
    id?: true
    trueGiftPhone?: true
    reCaptchaGoogle?: true
    updatedAt?: true
  }

  export type SetupCountAggregateInputType = {
    id?: true
    trueGiftPhone?: true
    reCaptchaGoogle?: true
    updatedAt?: true
    _all?: true
  }

  export type SetupAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which setup to aggregate.
     */
    where?: setupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of setups to fetch.
     */
    orderBy?: setupOrderByWithRelationInput | setupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: setupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` setups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` setups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned setups
    **/
    _count?: true | SetupCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SetupAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SetupSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SetupMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SetupMaxAggregateInputType
  }

  export type GetSetupAggregateType<T extends SetupAggregateArgs> = {
        [P in keyof T & keyof AggregateSetup]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSetup[P]>
      : GetScalarType<T[P], AggregateSetup[P]>
  }




  export type setupGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: setupWhereInput
    orderBy?: setupOrderByWithAggregationInput | setupOrderByWithAggregationInput[]
    by: SetupScalarFieldEnum[] | SetupScalarFieldEnum
    having?: setupScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SetupCountAggregateInputType | true
    _avg?: SetupAvgAggregateInputType
    _sum?: SetupSumAggregateInputType
    _min?: SetupMinAggregateInputType
    _max?: SetupMaxAggregateInputType
  }

  export type SetupGroupByOutputType = {
    id: number
    trueGiftPhone: string | null
    reCaptchaGoogle: string | null
    updatedAt: Date
    _count: SetupCountAggregateOutputType | null
    _avg: SetupAvgAggregateOutputType | null
    _sum: SetupSumAggregateOutputType | null
    _min: SetupMinAggregateOutputType | null
    _max: SetupMaxAggregateOutputType | null
  }

  type GetSetupGroupByPayload<T extends setupGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SetupGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SetupGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SetupGroupByOutputType[P]>
            : GetScalarType<T[P], SetupGroupByOutputType[P]>
        }
      >
    >


  export type setupSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    trueGiftPhone?: boolean
    reCaptchaGoogle?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["setup"]>


  export type setupSelectScalar = {
    id?: boolean
    trueGiftPhone?: boolean
    reCaptchaGoogle?: boolean
    updatedAt?: boolean
  }

  export type setupOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "trueGiftPhone" | "reCaptchaGoogle" | "updatedAt", ExtArgs["result"]["setup"]>

  export type $setupPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "setup"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      trueGiftPhone: string | null
      reCaptchaGoogle: string | null
      updatedAt: Date
    }, ExtArgs["result"]["setup"]>
    composites: {}
  }

  type setupGetPayload<S extends boolean | null | undefined | setupDefaultArgs> = $Result.GetResult<Prisma.$setupPayload, S>

  type setupCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<setupFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SetupCountAggregateInputType | true
    }

  export interface setupDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['setup'], meta: { name: 'setup' } }
    /**
     * Find zero or one Setup that matches the filter.
     * @param {setupFindUniqueArgs} args - Arguments to find a Setup
     * @example
     * // Get one Setup
     * const setup = await prisma.setup.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends setupFindUniqueArgs>(args: SelectSubset<T, setupFindUniqueArgs<ExtArgs>>): Prisma__setupClient<$Result.GetResult<Prisma.$setupPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Setup that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {setupFindUniqueOrThrowArgs} args - Arguments to find a Setup
     * @example
     * // Get one Setup
     * const setup = await prisma.setup.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends setupFindUniqueOrThrowArgs>(args: SelectSubset<T, setupFindUniqueOrThrowArgs<ExtArgs>>): Prisma__setupClient<$Result.GetResult<Prisma.$setupPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Setup that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {setupFindFirstArgs} args - Arguments to find a Setup
     * @example
     * // Get one Setup
     * const setup = await prisma.setup.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends setupFindFirstArgs>(args?: SelectSubset<T, setupFindFirstArgs<ExtArgs>>): Prisma__setupClient<$Result.GetResult<Prisma.$setupPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Setup that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {setupFindFirstOrThrowArgs} args - Arguments to find a Setup
     * @example
     * // Get one Setup
     * const setup = await prisma.setup.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends setupFindFirstOrThrowArgs>(args?: SelectSubset<T, setupFindFirstOrThrowArgs<ExtArgs>>): Prisma__setupClient<$Result.GetResult<Prisma.$setupPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Setups that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {setupFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Setups
     * const setups = await prisma.setup.findMany()
     * 
     * // Get first 10 Setups
     * const setups = await prisma.setup.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const setupWithIdOnly = await prisma.setup.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends setupFindManyArgs>(args?: SelectSubset<T, setupFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$setupPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Setup.
     * @param {setupCreateArgs} args - Arguments to create a Setup.
     * @example
     * // Create one Setup
     * const Setup = await prisma.setup.create({
     *   data: {
     *     // ... data to create a Setup
     *   }
     * })
     * 
     */
    create<T extends setupCreateArgs>(args: SelectSubset<T, setupCreateArgs<ExtArgs>>): Prisma__setupClient<$Result.GetResult<Prisma.$setupPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Setups.
     * @param {setupCreateManyArgs} args - Arguments to create many Setups.
     * @example
     * // Create many Setups
     * const setup = await prisma.setup.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends setupCreateManyArgs>(args?: SelectSubset<T, setupCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Setup.
     * @param {setupDeleteArgs} args - Arguments to delete one Setup.
     * @example
     * // Delete one Setup
     * const Setup = await prisma.setup.delete({
     *   where: {
     *     // ... filter to delete one Setup
     *   }
     * })
     * 
     */
    delete<T extends setupDeleteArgs>(args: SelectSubset<T, setupDeleteArgs<ExtArgs>>): Prisma__setupClient<$Result.GetResult<Prisma.$setupPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Setup.
     * @param {setupUpdateArgs} args - Arguments to update one Setup.
     * @example
     * // Update one Setup
     * const setup = await prisma.setup.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends setupUpdateArgs>(args: SelectSubset<T, setupUpdateArgs<ExtArgs>>): Prisma__setupClient<$Result.GetResult<Prisma.$setupPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Setups.
     * @param {setupDeleteManyArgs} args - Arguments to filter Setups to delete.
     * @example
     * // Delete a few Setups
     * const { count } = await prisma.setup.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends setupDeleteManyArgs>(args?: SelectSubset<T, setupDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Setups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {setupUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Setups
     * const setup = await prisma.setup.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends setupUpdateManyArgs>(args: SelectSubset<T, setupUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Setup.
     * @param {setupUpsertArgs} args - Arguments to update or create a Setup.
     * @example
     * // Update or create a Setup
     * const setup = await prisma.setup.upsert({
     *   create: {
     *     // ... data to create a Setup
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Setup we want to update
     *   }
     * })
     */
    upsert<T extends setupUpsertArgs>(args: SelectSubset<T, setupUpsertArgs<ExtArgs>>): Prisma__setupClient<$Result.GetResult<Prisma.$setupPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Setups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {setupCountArgs} args - Arguments to filter Setups to count.
     * @example
     * // Count the number of Setups
     * const count = await prisma.setup.count({
     *   where: {
     *     // ... the filter for the Setups we want to count
     *   }
     * })
    **/
    count<T extends setupCountArgs>(
      args?: Subset<T, setupCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SetupCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Setup.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SetupAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SetupAggregateArgs>(args: Subset<T, SetupAggregateArgs>): Prisma.PrismaPromise<GetSetupAggregateType<T>>

    /**
     * Group by Setup.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {setupGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends setupGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: setupGroupByArgs['orderBy'] }
        : { orderBy?: setupGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, setupGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSetupGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the setup model
   */
  readonly fields: setupFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for setup.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__setupClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the setup model
   */ 
  interface setupFieldRefs {
    readonly id: FieldRef<"setup", 'Int'>
    readonly trueGiftPhone: FieldRef<"setup", 'String'>
    readonly reCaptchaGoogle: FieldRef<"setup", 'String'>
    readonly updatedAt: FieldRef<"setup", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * setup findUnique
   */
  export type setupFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the setup
     */
    select?: setupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the setup
     */
    omit?: setupOmit<ExtArgs> | null
    /**
     * Filter, which setup to fetch.
     */
    where: setupWhereUniqueInput
  }

  /**
   * setup findUniqueOrThrow
   */
  export type setupFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the setup
     */
    select?: setupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the setup
     */
    omit?: setupOmit<ExtArgs> | null
    /**
     * Filter, which setup to fetch.
     */
    where: setupWhereUniqueInput
  }

  /**
   * setup findFirst
   */
  export type setupFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the setup
     */
    select?: setupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the setup
     */
    omit?: setupOmit<ExtArgs> | null
    /**
     * Filter, which setup to fetch.
     */
    where?: setupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of setups to fetch.
     */
    orderBy?: setupOrderByWithRelationInput | setupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for setups.
     */
    cursor?: setupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` setups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` setups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of setups.
     */
    distinct?: SetupScalarFieldEnum | SetupScalarFieldEnum[]
  }

  /**
   * setup findFirstOrThrow
   */
  export type setupFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the setup
     */
    select?: setupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the setup
     */
    omit?: setupOmit<ExtArgs> | null
    /**
     * Filter, which setup to fetch.
     */
    where?: setupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of setups to fetch.
     */
    orderBy?: setupOrderByWithRelationInput | setupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for setups.
     */
    cursor?: setupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` setups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` setups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of setups.
     */
    distinct?: SetupScalarFieldEnum | SetupScalarFieldEnum[]
  }

  /**
   * setup findMany
   */
  export type setupFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the setup
     */
    select?: setupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the setup
     */
    omit?: setupOmit<ExtArgs> | null
    /**
     * Filter, which setups to fetch.
     */
    where?: setupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of setups to fetch.
     */
    orderBy?: setupOrderByWithRelationInput | setupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing setups.
     */
    cursor?: setupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` setups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` setups.
     */
    skip?: number
    distinct?: SetupScalarFieldEnum | SetupScalarFieldEnum[]
  }

  /**
   * setup create
   */
  export type setupCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the setup
     */
    select?: setupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the setup
     */
    omit?: setupOmit<ExtArgs> | null
    /**
     * The data needed to create a setup.
     */
    data: XOR<setupCreateInput, setupUncheckedCreateInput>
  }

  /**
   * setup createMany
   */
  export type setupCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many setups.
     */
    data: setupCreateManyInput | setupCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * setup update
   */
  export type setupUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the setup
     */
    select?: setupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the setup
     */
    omit?: setupOmit<ExtArgs> | null
    /**
     * The data needed to update a setup.
     */
    data: XOR<setupUpdateInput, setupUncheckedUpdateInput>
    /**
     * Choose, which setup to update.
     */
    where: setupWhereUniqueInput
  }

  /**
   * setup updateMany
   */
  export type setupUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update setups.
     */
    data: XOR<setupUpdateManyMutationInput, setupUncheckedUpdateManyInput>
    /**
     * Filter which setups to update
     */
    where?: setupWhereInput
  }

  /**
   * setup upsert
   */
  export type setupUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the setup
     */
    select?: setupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the setup
     */
    omit?: setupOmit<ExtArgs> | null
    /**
     * The filter to search for the setup to update in case it exists.
     */
    where: setupWhereUniqueInput
    /**
     * In case the setup found by the `where` argument doesn't exist, create a new setup with this data.
     */
    create: XOR<setupCreateInput, setupUncheckedCreateInput>
    /**
     * In case the setup was found with the provided `where` argument, update it with this data.
     */
    update: XOR<setupUpdateInput, setupUncheckedUpdateInput>
  }

  /**
   * setup delete
   */
  export type setupDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the setup
     */
    select?: setupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the setup
     */
    omit?: setupOmit<ExtArgs> | null
    /**
     * Filter which setup to delete.
     */
    where: setupWhereUniqueInput
  }

  /**
   * setup deleteMany
   */
  export type setupDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which setups to delete
     */
    where?: setupWhereInput
  }

  /**
   * setup without action
   */
  export type setupDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the setup
     */
    select?: setupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the setup
     */
    omit?: setupOmit<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const Buy_logScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    game_id: 'game_id',
    buy_time: 'buy_time',
    price: 'price',
    isActive: 'isActive',
    createdAt: 'createdAt'
  };

  export type Buy_logScalarFieldEnum = (typeof Buy_logScalarFieldEnum)[keyof typeof Buy_logScalarFieldEnum]


  export const CategoryScalarFieldEnum: {
    id: 'id',
    category_name: 'category_name',
    visible: 'visible'
  };

  export type CategoryScalarFieldEnum = (typeof CategoryScalarFieldEnum)[keyof typeof CategoryScalarFieldEnum]


  export const GameScalarFieldEnum: {
    id: 'id',
    name: 'name',
    short_name: 'short_name',
    day_h: 'day_h',
    day_1: 'day_1',
    day_3: 'day_3',
    day_7: 'day_7',
    day_15: 'day_15',
    day_30: 'day_30',
    day_p: 'day_p',
    download_src: 'download_src',
    img_src: 'img_src',
    hack_img_scr: 'hack_img_scr',
    status: 'status',
    detail: 'detail',
    game_src: 'game_src',
    visible: 'visible',
    youtube_link: 'youtube_link',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type GameScalarFieldEnum = (typeof GameScalarFieldEnum)[keyof typeof GameScalarFieldEnum]


  export const Game_actScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    game_id: 'game_id',
    exp_date: 'exp_date',
    last_update: 'last_update',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type Game_actScalarFieldEnum = (typeof Game_actScalarFieldEnum)[keyof typeof Game_actScalarFieldEnum]


  export const Redeem_logScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    redeem_amount: 'redeem_amount',
    time: 'time',
    link: 'link',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type Redeem_logScalarFieldEnum = (typeof Redeem_logScalarFieldEnum)[keyof typeof Redeem_logScalarFieldEnum]


  export const UsersScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    hwid: 'hwid',
    credit: 'credit',
    role: 'role',
    email_verified_at: 'email_verified_at',
    password: 'password',
    remember_token: 'remember_token',
    created_at: 'created_at',
    updated_at: 'updated_at',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  export const SetupScalarFieldEnum: {
    id: 'id',
    trueGiftPhone: 'trueGiftPhone',
    reCaptchaGoogle: 'reCaptchaGoogle',
    updatedAt: 'updatedAt'
  };

  export type SetupScalarFieldEnum = (typeof SetupScalarFieldEnum)[keyof typeof SetupScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type buy_logWhereInput = {
    AND?: buy_logWhereInput | buy_logWhereInput[]
    OR?: buy_logWhereInput[]
    NOT?: buy_logWhereInput | buy_logWhereInput[]
    id?: IntFilter<"buy_log"> | number
    user_id?: IntFilter<"buy_log"> | number
    game_id?: IntFilter<"buy_log"> | number
    buy_time?: IntFilter<"buy_log"> | number
    price?: IntFilter<"buy_log"> | number
    isActive?: BoolFilter<"buy_log"> | boolean
    createdAt?: DateTimeFilter<"buy_log"> | Date | string
    users?: XOR<UsersRelationFilter, usersWhereInput>
    game?: XOR<GameRelationFilter, gameWhereInput>
  }

  export type buy_logOrderByWithRelationInput = {
    id?: SortOrder
    user_id?: SortOrder
    game_id?: SortOrder
    buy_time?: SortOrder
    price?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    users?: usersOrderByWithRelationInput
    game?: gameOrderByWithRelationInput
  }

  export type buy_logWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: buy_logWhereInput | buy_logWhereInput[]
    OR?: buy_logWhereInput[]
    NOT?: buy_logWhereInput | buy_logWhereInput[]
    user_id?: IntFilter<"buy_log"> | number
    game_id?: IntFilter<"buy_log"> | number
    buy_time?: IntFilter<"buy_log"> | number
    price?: IntFilter<"buy_log"> | number
    isActive?: BoolFilter<"buy_log"> | boolean
    createdAt?: DateTimeFilter<"buy_log"> | Date | string
    users?: XOR<UsersRelationFilter, usersWhereInput>
    game?: XOR<GameRelationFilter, gameWhereInput>
  }, "id">

  export type buy_logOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrder
    game_id?: SortOrder
    buy_time?: SortOrder
    price?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    _count?: buy_logCountOrderByAggregateInput
    _avg?: buy_logAvgOrderByAggregateInput
    _max?: buy_logMaxOrderByAggregateInput
    _min?: buy_logMinOrderByAggregateInput
    _sum?: buy_logSumOrderByAggregateInput
  }

  export type buy_logScalarWhereWithAggregatesInput = {
    AND?: buy_logScalarWhereWithAggregatesInput | buy_logScalarWhereWithAggregatesInput[]
    OR?: buy_logScalarWhereWithAggregatesInput[]
    NOT?: buy_logScalarWhereWithAggregatesInput | buy_logScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"buy_log"> | number
    user_id?: IntWithAggregatesFilter<"buy_log"> | number
    game_id?: IntWithAggregatesFilter<"buy_log"> | number
    buy_time?: IntWithAggregatesFilter<"buy_log"> | number
    price?: IntWithAggregatesFilter<"buy_log"> | number
    isActive?: BoolWithAggregatesFilter<"buy_log"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"buy_log"> | Date | string
  }

  export type categoryWhereInput = {
    AND?: categoryWhereInput | categoryWhereInput[]
    OR?: categoryWhereInput[]
    NOT?: categoryWhereInput | categoryWhereInput[]
    id?: IntFilter<"category"> | number
    category_name?: StringFilter<"category"> | string
    visible?: IntFilter<"category"> | number
  }

  export type categoryOrderByWithRelationInput = {
    id?: SortOrder
    category_name?: SortOrder
    visible?: SortOrder
  }

  export type categoryWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: categoryWhereInput | categoryWhereInput[]
    OR?: categoryWhereInput[]
    NOT?: categoryWhereInput | categoryWhereInput[]
    category_name?: StringFilter<"category"> | string
    visible?: IntFilter<"category"> | number
  }, "id">

  export type categoryOrderByWithAggregationInput = {
    id?: SortOrder
    category_name?: SortOrder
    visible?: SortOrder
    _count?: categoryCountOrderByAggregateInput
    _avg?: categoryAvgOrderByAggregateInput
    _max?: categoryMaxOrderByAggregateInput
    _min?: categoryMinOrderByAggregateInput
    _sum?: categorySumOrderByAggregateInput
  }

  export type categoryScalarWhereWithAggregatesInput = {
    AND?: categoryScalarWhereWithAggregatesInput | categoryScalarWhereWithAggregatesInput[]
    OR?: categoryScalarWhereWithAggregatesInput[]
    NOT?: categoryScalarWhereWithAggregatesInput | categoryScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"category"> | number
    category_name?: StringWithAggregatesFilter<"category"> | string
    visible?: IntWithAggregatesFilter<"category"> | number
  }

  export type gameWhereInput = {
    AND?: gameWhereInput | gameWhereInput[]
    OR?: gameWhereInput[]
    NOT?: gameWhereInput | gameWhereInput[]
    id?: IntFilter<"game"> | number
    name?: StringFilter<"game"> | string
    short_name?: StringFilter<"game"> | string
    day_h?: IntFilter<"game"> | number
    day_1?: IntFilter<"game"> | number
    day_3?: IntFilter<"game"> | number
    day_7?: IntFilter<"game"> | number
    day_15?: IntFilter<"game"> | number
    day_30?: IntFilter<"game"> | number
    day_p?: IntFilter<"game"> | number
    download_src?: StringFilter<"game"> | string
    img_src?: StringFilter<"game"> | string
    hack_img_scr?: StringFilter<"game"> | string
    status?: StringFilter<"game"> | string
    detail?: StringFilter<"game"> | string
    game_src?: StringFilter<"game"> | string
    visible?: IntFilter<"game"> | number
    youtube_link?: StringNullableFilter<"game"> | string | null
    isActive?: BoolFilter<"game"> | boolean
    createdAt?: DateTimeFilter<"game"> | Date | string
    updatedAt?: DateTimeFilter<"game"> | Date | string
    buy_log?: Buy_logListRelationFilter
    game_act?: Game_actListRelationFilter
  }

  export type gameOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    short_name?: SortOrder
    day_h?: SortOrder
    day_1?: SortOrder
    day_3?: SortOrder
    day_7?: SortOrder
    day_15?: SortOrder
    day_30?: SortOrder
    day_p?: SortOrder
    download_src?: SortOrder
    img_src?: SortOrder
    hack_img_scr?: SortOrder
    status?: SortOrder
    detail?: SortOrder
    game_src?: SortOrder
    visible?: SortOrder
    youtube_link?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    buy_log?: buy_logOrderByRelationAggregateInput
    game_act?: game_actOrderByRelationAggregateInput
  }

  export type gameWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    short_name?: string
    AND?: gameWhereInput | gameWhereInput[]
    OR?: gameWhereInput[]
    NOT?: gameWhereInput | gameWhereInput[]
    name?: StringFilter<"game"> | string
    day_h?: IntFilter<"game"> | number
    day_1?: IntFilter<"game"> | number
    day_3?: IntFilter<"game"> | number
    day_7?: IntFilter<"game"> | number
    day_15?: IntFilter<"game"> | number
    day_30?: IntFilter<"game"> | number
    day_p?: IntFilter<"game"> | number
    download_src?: StringFilter<"game"> | string
    img_src?: StringFilter<"game"> | string
    hack_img_scr?: StringFilter<"game"> | string
    status?: StringFilter<"game"> | string
    detail?: StringFilter<"game"> | string
    game_src?: StringFilter<"game"> | string
    visible?: IntFilter<"game"> | number
    youtube_link?: StringNullableFilter<"game"> | string | null
    isActive?: BoolFilter<"game"> | boolean
    createdAt?: DateTimeFilter<"game"> | Date | string
    updatedAt?: DateTimeFilter<"game"> | Date | string
    buy_log?: Buy_logListRelationFilter
    game_act?: Game_actListRelationFilter
  }, "id" | "short_name">

  export type gameOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    short_name?: SortOrder
    day_h?: SortOrder
    day_1?: SortOrder
    day_3?: SortOrder
    day_7?: SortOrder
    day_15?: SortOrder
    day_30?: SortOrder
    day_p?: SortOrder
    download_src?: SortOrder
    img_src?: SortOrder
    hack_img_scr?: SortOrder
    status?: SortOrder
    detail?: SortOrder
    game_src?: SortOrder
    visible?: SortOrder
    youtube_link?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: gameCountOrderByAggregateInput
    _avg?: gameAvgOrderByAggregateInput
    _max?: gameMaxOrderByAggregateInput
    _min?: gameMinOrderByAggregateInput
    _sum?: gameSumOrderByAggregateInput
  }

  export type gameScalarWhereWithAggregatesInput = {
    AND?: gameScalarWhereWithAggregatesInput | gameScalarWhereWithAggregatesInput[]
    OR?: gameScalarWhereWithAggregatesInput[]
    NOT?: gameScalarWhereWithAggregatesInput | gameScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"game"> | number
    name?: StringWithAggregatesFilter<"game"> | string
    short_name?: StringWithAggregatesFilter<"game"> | string
    day_h?: IntWithAggregatesFilter<"game"> | number
    day_1?: IntWithAggregatesFilter<"game"> | number
    day_3?: IntWithAggregatesFilter<"game"> | number
    day_7?: IntWithAggregatesFilter<"game"> | number
    day_15?: IntWithAggregatesFilter<"game"> | number
    day_30?: IntWithAggregatesFilter<"game"> | number
    day_p?: IntWithAggregatesFilter<"game"> | number
    download_src?: StringWithAggregatesFilter<"game"> | string
    img_src?: StringWithAggregatesFilter<"game"> | string
    hack_img_scr?: StringWithAggregatesFilter<"game"> | string
    status?: StringWithAggregatesFilter<"game"> | string
    detail?: StringWithAggregatesFilter<"game"> | string
    game_src?: StringWithAggregatesFilter<"game"> | string
    visible?: IntWithAggregatesFilter<"game"> | number
    youtube_link?: StringNullableWithAggregatesFilter<"game"> | string | null
    isActive?: BoolWithAggregatesFilter<"game"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"game"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"game"> | Date | string
  }

  export type game_actWhereInput = {
    AND?: game_actWhereInput | game_actWhereInput[]
    OR?: game_actWhereInput[]
    NOT?: game_actWhereInput | game_actWhereInput[]
    id?: IntFilter<"game_act"> | number
    user_id?: IntFilter<"game_act"> | number
    game_id?: IntFilter<"game_act"> | number
    exp_date?: IntFilter<"game_act"> | number
    last_update?: IntNullableFilter<"game_act"> | number | null
    isActive?: BoolFilter<"game_act"> | boolean
    createdAt?: DateTimeFilter<"game_act"> | Date | string
    updatedAt?: DateTimeFilter<"game_act"> | Date | string
    users?: XOR<UsersRelationFilter, usersWhereInput>
    game?: XOR<GameRelationFilter, gameWhereInput>
  }

  export type game_actOrderByWithRelationInput = {
    id?: SortOrder
    user_id?: SortOrder
    game_id?: SortOrder
    exp_date?: SortOrder
    last_update?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    users?: usersOrderByWithRelationInput
    game?: gameOrderByWithRelationInput
  }

  export type game_actWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: game_actWhereInput | game_actWhereInput[]
    OR?: game_actWhereInput[]
    NOT?: game_actWhereInput | game_actWhereInput[]
    user_id?: IntFilter<"game_act"> | number
    game_id?: IntFilter<"game_act"> | number
    exp_date?: IntFilter<"game_act"> | number
    last_update?: IntNullableFilter<"game_act"> | number | null
    isActive?: BoolFilter<"game_act"> | boolean
    createdAt?: DateTimeFilter<"game_act"> | Date | string
    updatedAt?: DateTimeFilter<"game_act"> | Date | string
    users?: XOR<UsersRelationFilter, usersWhereInput>
    game?: XOR<GameRelationFilter, gameWhereInput>
  }, "id">

  export type game_actOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrder
    game_id?: SortOrder
    exp_date?: SortOrder
    last_update?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: game_actCountOrderByAggregateInput
    _avg?: game_actAvgOrderByAggregateInput
    _max?: game_actMaxOrderByAggregateInput
    _min?: game_actMinOrderByAggregateInput
    _sum?: game_actSumOrderByAggregateInput
  }

  export type game_actScalarWhereWithAggregatesInput = {
    AND?: game_actScalarWhereWithAggregatesInput | game_actScalarWhereWithAggregatesInput[]
    OR?: game_actScalarWhereWithAggregatesInput[]
    NOT?: game_actScalarWhereWithAggregatesInput | game_actScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"game_act"> | number
    user_id?: IntWithAggregatesFilter<"game_act"> | number
    game_id?: IntWithAggregatesFilter<"game_act"> | number
    exp_date?: IntWithAggregatesFilter<"game_act"> | number
    last_update?: IntNullableWithAggregatesFilter<"game_act"> | number | null
    isActive?: BoolWithAggregatesFilter<"game_act"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"game_act"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"game_act"> | Date | string
  }

  export type redeem_logWhereInput = {
    AND?: redeem_logWhereInput | redeem_logWhereInput[]
    OR?: redeem_logWhereInput[]
    NOT?: redeem_logWhereInput | redeem_logWhereInput[]
    id?: IntFilter<"redeem_log"> | number
    user_id?: IntFilter<"redeem_log"> | number
    redeem_amount?: IntFilter<"redeem_log"> | number
    time?: IntNullableFilter<"redeem_log"> | number | null
    link?: StringNullableFilter<"redeem_log"> | string | null
    isActive?: BoolFilter<"redeem_log"> | boolean
    createdAt?: DateTimeFilter<"redeem_log"> | Date | string
    updatedAt?: DateTimeFilter<"redeem_log"> | Date | string
    users?: XOR<UsersRelationFilter, usersWhereInput>
  }

  export type redeem_logOrderByWithRelationInput = {
    id?: SortOrder
    user_id?: SortOrder
    redeem_amount?: SortOrder
    time?: SortOrderInput | SortOrder
    link?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    users?: usersOrderByWithRelationInput
  }

  export type redeem_logWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: redeem_logWhereInput | redeem_logWhereInput[]
    OR?: redeem_logWhereInput[]
    NOT?: redeem_logWhereInput | redeem_logWhereInput[]
    user_id?: IntFilter<"redeem_log"> | number
    redeem_amount?: IntFilter<"redeem_log"> | number
    time?: IntNullableFilter<"redeem_log"> | number | null
    link?: StringNullableFilter<"redeem_log"> | string | null
    isActive?: BoolFilter<"redeem_log"> | boolean
    createdAt?: DateTimeFilter<"redeem_log"> | Date | string
    updatedAt?: DateTimeFilter<"redeem_log"> | Date | string
    users?: XOR<UsersRelationFilter, usersWhereInput>
  }, "id">

  export type redeem_logOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrder
    redeem_amount?: SortOrder
    time?: SortOrderInput | SortOrder
    link?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: redeem_logCountOrderByAggregateInput
    _avg?: redeem_logAvgOrderByAggregateInput
    _max?: redeem_logMaxOrderByAggregateInput
    _min?: redeem_logMinOrderByAggregateInput
    _sum?: redeem_logSumOrderByAggregateInput
  }

  export type redeem_logScalarWhereWithAggregatesInput = {
    AND?: redeem_logScalarWhereWithAggregatesInput | redeem_logScalarWhereWithAggregatesInput[]
    OR?: redeem_logScalarWhereWithAggregatesInput[]
    NOT?: redeem_logScalarWhereWithAggregatesInput | redeem_logScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"redeem_log"> | number
    user_id?: IntWithAggregatesFilter<"redeem_log"> | number
    redeem_amount?: IntWithAggregatesFilter<"redeem_log"> | number
    time?: IntNullableWithAggregatesFilter<"redeem_log"> | number | null
    link?: StringNullableWithAggregatesFilter<"redeem_log"> | string | null
    isActive?: BoolWithAggregatesFilter<"redeem_log"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"redeem_log"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"redeem_log"> | Date | string
  }

  export type usersWhereInput = {
    AND?: usersWhereInput | usersWhereInput[]
    OR?: usersWhereInput[]
    NOT?: usersWhereInput | usersWhereInput[]
    id?: IntFilter<"users"> | number
    name?: StringFilter<"users"> | string
    email?: StringFilter<"users"> | string
    hwid?: StringNullableFilter<"users"> | string | null
    credit?: IntFilter<"users"> | number
    role?: IntFilter<"users"> | number
    email_verified_at?: DateTimeNullableFilter<"users"> | Date | string | null
    password?: StringFilter<"users"> | string
    remember_token?: StringNullableFilter<"users"> | string | null
    created_at?: DateTimeNullableFilter<"users"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"users"> | Date | string | null
    isActive?: BoolFilter<"users"> | boolean
    createdAt?: DateTimeFilter<"users"> | Date | string
    updatedAt?: DateTimeFilter<"users"> | Date | string
    buy_log?: Buy_logListRelationFilter
    game_act?: Game_actListRelationFilter
    redeem_log?: Redeem_logListRelationFilter
  }

  export type usersOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    hwid?: SortOrderInput | SortOrder
    credit?: SortOrder
    role?: SortOrder
    email_verified_at?: SortOrderInput | SortOrder
    password?: SortOrder
    remember_token?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    buy_log?: buy_logOrderByRelationAggregateInput
    game_act?: game_actOrderByRelationAggregateInput
    redeem_log?: redeem_logOrderByRelationAggregateInput
  }

  export type usersWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: usersWhereInput | usersWhereInput[]
    OR?: usersWhereInput[]
    NOT?: usersWhereInput | usersWhereInput[]
    name?: StringFilter<"users"> | string
    hwid?: StringNullableFilter<"users"> | string | null
    credit?: IntFilter<"users"> | number
    role?: IntFilter<"users"> | number
    email_verified_at?: DateTimeNullableFilter<"users"> | Date | string | null
    password?: StringFilter<"users"> | string
    remember_token?: StringNullableFilter<"users"> | string | null
    created_at?: DateTimeNullableFilter<"users"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"users"> | Date | string | null
    isActive?: BoolFilter<"users"> | boolean
    createdAt?: DateTimeFilter<"users"> | Date | string
    updatedAt?: DateTimeFilter<"users"> | Date | string
    buy_log?: Buy_logListRelationFilter
    game_act?: Game_actListRelationFilter
    redeem_log?: Redeem_logListRelationFilter
  }, "id" | "email">

  export type usersOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    hwid?: SortOrderInput | SortOrder
    credit?: SortOrder
    role?: SortOrder
    email_verified_at?: SortOrderInput | SortOrder
    password?: SortOrder
    remember_token?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: usersCountOrderByAggregateInput
    _avg?: usersAvgOrderByAggregateInput
    _max?: usersMaxOrderByAggregateInput
    _min?: usersMinOrderByAggregateInput
    _sum?: usersSumOrderByAggregateInput
  }

  export type usersScalarWhereWithAggregatesInput = {
    AND?: usersScalarWhereWithAggregatesInput | usersScalarWhereWithAggregatesInput[]
    OR?: usersScalarWhereWithAggregatesInput[]
    NOT?: usersScalarWhereWithAggregatesInput | usersScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"users"> | number
    name?: StringWithAggregatesFilter<"users"> | string
    email?: StringWithAggregatesFilter<"users"> | string
    hwid?: StringNullableWithAggregatesFilter<"users"> | string | null
    credit?: IntWithAggregatesFilter<"users"> | number
    role?: IntWithAggregatesFilter<"users"> | number
    email_verified_at?: DateTimeNullableWithAggregatesFilter<"users"> | Date | string | null
    password?: StringWithAggregatesFilter<"users"> | string
    remember_token?: StringNullableWithAggregatesFilter<"users"> | string | null
    created_at?: DateTimeNullableWithAggregatesFilter<"users"> | Date | string | null
    updated_at?: DateTimeNullableWithAggregatesFilter<"users"> | Date | string | null
    isActive?: BoolWithAggregatesFilter<"users"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"users"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"users"> | Date | string
  }

  export type setupWhereInput = {
    AND?: setupWhereInput | setupWhereInput[]
    OR?: setupWhereInput[]
    NOT?: setupWhereInput | setupWhereInput[]
    id?: IntFilter<"setup"> | number
    trueGiftPhone?: StringNullableFilter<"setup"> | string | null
    reCaptchaGoogle?: StringNullableFilter<"setup"> | string | null
    updatedAt?: DateTimeFilter<"setup"> | Date | string
  }

  export type setupOrderByWithRelationInput = {
    id?: SortOrder
    trueGiftPhone?: SortOrderInput | SortOrder
    reCaptchaGoogle?: SortOrderInput | SortOrder
    updatedAt?: SortOrder
  }

  export type setupWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: setupWhereInput | setupWhereInput[]
    OR?: setupWhereInput[]
    NOT?: setupWhereInput | setupWhereInput[]
    trueGiftPhone?: StringNullableFilter<"setup"> | string | null
    reCaptchaGoogle?: StringNullableFilter<"setup"> | string | null
    updatedAt?: DateTimeFilter<"setup"> | Date | string
  }, "id">

  export type setupOrderByWithAggregationInput = {
    id?: SortOrder
    trueGiftPhone?: SortOrderInput | SortOrder
    reCaptchaGoogle?: SortOrderInput | SortOrder
    updatedAt?: SortOrder
    _count?: setupCountOrderByAggregateInput
    _avg?: setupAvgOrderByAggregateInput
    _max?: setupMaxOrderByAggregateInput
    _min?: setupMinOrderByAggregateInput
    _sum?: setupSumOrderByAggregateInput
  }

  export type setupScalarWhereWithAggregatesInput = {
    AND?: setupScalarWhereWithAggregatesInput | setupScalarWhereWithAggregatesInput[]
    OR?: setupScalarWhereWithAggregatesInput[]
    NOT?: setupScalarWhereWithAggregatesInput | setupScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"setup"> | number
    trueGiftPhone?: StringNullableWithAggregatesFilter<"setup"> | string | null
    reCaptchaGoogle?: StringNullableWithAggregatesFilter<"setup"> | string | null
    updatedAt?: DateTimeWithAggregatesFilter<"setup"> | Date | string
  }

  export type buy_logCreateInput = {
    buy_time: number
    price: number
    isActive?: boolean
    createdAt?: Date | string
    users: usersCreateNestedOneWithoutBuy_logInput
    game: gameCreateNestedOneWithoutBuy_logInput
  }

  export type buy_logUncheckedCreateInput = {
    id?: number
    user_id: number
    game_id: number
    buy_time: number
    price: number
    isActive?: boolean
    createdAt?: Date | string
  }

  export type buy_logUpdateInput = {
    buy_time?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: usersUpdateOneRequiredWithoutBuy_logNestedInput
    game?: gameUpdateOneRequiredWithoutBuy_logNestedInput
  }

  export type buy_logUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    game_id?: IntFieldUpdateOperationsInput | number
    buy_time?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type buy_logCreateManyInput = {
    id?: number
    user_id: number
    game_id: number
    buy_time: number
    price: number
    isActive?: boolean
    createdAt?: Date | string
  }

  export type buy_logUpdateManyMutationInput = {
    buy_time?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type buy_logUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    game_id?: IntFieldUpdateOperationsInput | number
    buy_time?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type categoryCreateInput = {
    category_name: string
    visible?: number
  }

  export type categoryUncheckedCreateInput = {
    id?: number
    category_name: string
    visible?: number
  }

  export type categoryUpdateInput = {
    category_name?: StringFieldUpdateOperationsInput | string
    visible?: IntFieldUpdateOperationsInput | number
  }

  export type categoryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    category_name?: StringFieldUpdateOperationsInput | string
    visible?: IntFieldUpdateOperationsInput | number
  }

  export type categoryCreateManyInput = {
    id?: number
    category_name: string
    visible?: number
  }

  export type categoryUpdateManyMutationInput = {
    category_name?: StringFieldUpdateOperationsInput | string
    visible?: IntFieldUpdateOperationsInput | number
  }

  export type categoryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    category_name?: StringFieldUpdateOperationsInput | string
    visible?: IntFieldUpdateOperationsInput | number
  }

  export type gameCreateInput = {
    name: string
    short_name: string
    day_h: number
    day_1: number
    day_3: number
    day_7: number
    day_15: number
    day_30: number
    day_p: number
    download_src: string
    img_src: string
    hack_img_scr: string
    status: string
    detail: string
    game_src: string
    visible?: number
    youtube_link?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    buy_log?: buy_logCreateNestedManyWithoutGameInput
    game_act?: game_actCreateNestedManyWithoutGameInput
  }

  export type gameUncheckedCreateInput = {
    id?: number
    name: string
    short_name: string
    day_h: number
    day_1: number
    day_3: number
    day_7: number
    day_15: number
    day_30: number
    day_p: number
    download_src: string
    img_src: string
    hack_img_scr: string
    status: string
    detail: string
    game_src: string
    visible?: number
    youtube_link?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    buy_log?: buy_logUncheckedCreateNestedManyWithoutGameInput
    game_act?: game_actUncheckedCreateNestedManyWithoutGameInput
  }

  export type gameUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    short_name?: StringFieldUpdateOperationsInput | string
    day_h?: IntFieldUpdateOperationsInput | number
    day_1?: IntFieldUpdateOperationsInput | number
    day_3?: IntFieldUpdateOperationsInput | number
    day_7?: IntFieldUpdateOperationsInput | number
    day_15?: IntFieldUpdateOperationsInput | number
    day_30?: IntFieldUpdateOperationsInput | number
    day_p?: IntFieldUpdateOperationsInput | number
    download_src?: StringFieldUpdateOperationsInput | string
    img_src?: StringFieldUpdateOperationsInput | string
    hack_img_scr?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    detail?: StringFieldUpdateOperationsInput | string
    game_src?: StringFieldUpdateOperationsInput | string
    visible?: IntFieldUpdateOperationsInput | number
    youtube_link?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    buy_log?: buy_logUpdateManyWithoutGameNestedInput
    game_act?: game_actUpdateManyWithoutGameNestedInput
  }

  export type gameUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    short_name?: StringFieldUpdateOperationsInput | string
    day_h?: IntFieldUpdateOperationsInput | number
    day_1?: IntFieldUpdateOperationsInput | number
    day_3?: IntFieldUpdateOperationsInput | number
    day_7?: IntFieldUpdateOperationsInput | number
    day_15?: IntFieldUpdateOperationsInput | number
    day_30?: IntFieldUpdateOperationsInput | number
    day_p?: IntFieldUpdateOperationsInput | number
    download_src?: StringFieldUpdateOperationsInput | string
    img_src?: StringFieldUpdateOperationsInput | string
    hack_img_scr?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    detail?: StringFieldUpdateOperationsInput | string
    game_src?: StringFieldUpdateOperationsInput | string
    visible?: IntFieldUpdateOperationsInput | number
    youtube_link?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    buy_log?: buy_logUncheckedUpdateManyWithoutGameNestedInput
    game_act?: game_actUncheckedUpdateManyWithoutGameNestedInput
  }

  export type gameCreateManyInput = {
    id?: number
    name: string
    short_name: string
    day_h: number
    day_1: number
    day_3: number
    day_7: number
    day_15: number
    day_30: number
    day_p: number
    download_src: string
    img_src: string
    hack_img_scr: string
    status: string
    detail: string
    game_src: string
    visible?: number
    youtube_link?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type gameUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    short_name?: StringFieldUpdateOperationsInput | string
    day_h?: IntFieldUpdateOperationsInput | number
    day_1?: IntFieldUpdateOperationsInput | number
    day_3?: IntFieldUpdateOperationsInput | number
    day_7?: IntFieldUpdateOperationsInput | number
    day_15?: IntFieldUpdateOperationsInput | number
    day_30?: IntFieldUpdateOperationsInput | number
    day_p?: IntFieldUpdateOperationsInput | number
    download_src?: StringFieldUpdateOperationsInput | string
    img_src?: StringFieldUpdateOperationsInput | string
    hack_img_scr?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    detail?: StringFieldUpdateOperationsInput | string
    game_src?: StringFieldUpdateOperationsInput | string
    visible?: IntFieldUpdateOperationsInput | number
    youtube_link?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type gameUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    short_name?: StringFieldUpdateOperationsInput | string
    day_h?: IntFieldUpdateOperationsInput | number
    day_1?: IntFieldUpdateOperationsInput | number
    day_3?: IntFieldUpdateOperationsInput | number
    day_7?: IntFieldUpdateOperationsInput | number
    day_15?: IntFieldUpdateOperationsInput | number
    day_30?: IntFieldUpdateOperationsInput | number
    day_p?: IntFieldUpdateOperationsInput | number
    download_src?: StringFieldUpdateOperationsInput | string
    img_src?: StringFieldUpdateOperationsInput | string
    hack_img_scr?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    detail?: StringFieldUpdateOperationsInput | string
    game_src?: StringFieldUpdateOperationsInput | string
    visible?: IntFieldUpdateOperationsInput | number
    youtube_link?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type game_actCreateInput = {
    exp_date: number
    last_update?: number | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    users: usersCreateNestedOneWithoutGame_actInput
    game: gameCreateNestedOneWithoutGame_actInput
  }

  export type game_actUncheckedCreateInput = {
    id?: number
    user_id: number
    game_id: number
    exp_date: number
    last_update?: number | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type game_actUpdateInput = {
    exp_date?: IntFieldUpdateOperationsInput | number
    last_update?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: usersUpdateOneRequiredWithoutGame_actNestedInput
    game?: gameUpdateOneRequiredWithoutGame_actNestedInput
  }

  export type game_actUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    game_id?: IntFieldUpdateOperationsInput | number
    exp_date?: IntFieldUpdateOperationsInput | number
    last_update?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type game_actCreateManyInput = {
    id?: number
    user_id: number
    game_id: number
    exp_date: number
    last_update?: number | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type game_actUpdateManyMutationInput = {
    exp_date?: IntFieldUpdateOperationsInput | number
    last_update?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type game_actUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    game_id?: IntFieldUpdateOperationsInput | number
    exp_date?: IntFieldUpdateOperationsInput | number
    last_update?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type redeem_logCreateInput = {
    redeem_amount: number
    time?: number | null
    link?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    users: usersCreateNestedOneWithoutRedeem_logInput
  }

  export type redeem_logUncheckedCreateInput = {
    id?: number
    user_id: number
    redeem_amount: number
    time?: number | null
    link?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type redeem_logUpdateInput = {
    redeem_amount?: IntFieldUpdateOperationsInput | number
    time?: NullableIntFieldUpdateOperationsInput | number | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: usersUpdateOneRequiredWithoutRedeem_logNestedInput
  }

  export type redeem_logUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    redeem_amount?: IntFieldUpdateOperationsInput | number
    time?: NullableIntFieldUpdateOperationsInput | number | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type redeem_logCreateManyInput = {
    id?: number
    user_id: number
    redeem_amount: number
    time?: number | null
    link?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type redeem_logUpdateManyMutationInput = {
    redeem_amount?: IntFieldUpdateOperationsInput | number
    time?: NullableIntFieldUpdateOperationsInput | number | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type redeem_logUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    redeem_amount?: IntFieldUpdateOperationsInput | number
    time?: NullableIntFieldUpdateOperationsInput | number | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type usersCreateInput = {
    name: string
    email: string
    hwid?: string | null
    credit?: number
    role?: number
    email_verified_at?: Date | string | null
    password: string
    remember_token?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    buy_log?: buy_logCreateNestedManyWithoutUsersInput
    game_act?: game_actCreateNestedManyWithoutUsersInput
    redeem_log?: redeem_logCreateNestedManyWithoutUsersInput
  }

  export type usersUncheckedCreateInput = {
    id?: number
    name: string
    email: string
    hwid?: string | null
    credit?: number
    role?: number
    email_verified_at?: Date | string | null
    password: string
    remember_token?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    buy_log?: buy_logUncheckedCreateNestedManyWithoutUsersInput
    game_act?: game_actUncheckedCreateNestedManyWithoutUsersInput
    redeem_log?: redeem_logUncheckedCreateNestedManyWithoutUsersInput
  }

  export type usersUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    hwid?: NullableStringFieldUpdateOperationsInput | string | null
    credit?: IntFieldUpdateOperationsInput | number
    role?: IntFieldUpdateOperationsInput | number
    email_verified_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: StringFieldUpdateOperationsInput | string
    remember_token?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    buy_log?: buy_logUpdateManyWithoutUsersNestedInput
    game_act?: game_actUpdateManyWithoutUsersNestedInput
    redeem_log?: redeem_logUpdateManyWithoutUsersNestedInput
  }

  export type usersUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    hwid?: NullableStringFieldUpdateOperationsInput | string | null
    credit?: IntFieldUpdateOperationsInput | number
    role?: IntFieldUpdateOperationsInput | number
    email_verified_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: StringFieldUpdateOperationsInput | string
    remember_token?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    buy_log?: buy_logUncheckedUpdateManyWithoutUsersNestedInput
    game_act?: game_actUncheckedUpdateManyWithoutUsersNestedInput
    redeem_log?: redeem_logUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type usersCreateManyInput = {
    id?: number
    name: string
    email: string
    hwid?: string | null
    credit?: number
    role?: number
    email_verified_at?: Date | string | null
    password: string
    remember_token?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type usersUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    hwid?: NullableStringFieldUpdateOperationsInput | string | null
    credit?: IntFieldUpdateOperationsInput | number
    role?: IntFieldUpdateOperationsInput | number
    email_verified_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: StringFieldUpdateOperationsInput | string
    remember_token?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type usersUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    hwid?: NullableStringFieldUpdateOperationsInput | string | null
    credit?: IntFieldUpdateOperationsInput | number
    role?: IntFieldUpdateOperationsInput | number
    email_verified_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: StringFieldUpdateOperationsInput | string
    remember_token?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type setupCreateInput = {
    trueGiftPhone?: string | null
    reCaptchaGoogle?: string | null
    updatedAt?: Date | string
  }

  export type setupUncheckedCreateInput = {
    id?: number
    trueGiftPhone?: string | null
    reCaptchaGoogle?: string | null
    updatedAt?: Date | string
  }

  export type setupUpdateInput = {
    trueGiftPhone?: NullableStringFieldUpdateOperationsInput | string | null
    reCaptchaGoogle?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type setupUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    trueGiftPhone?: NullableStringFieldUpdateOperationsInput | string | null
    reCaptchaGoogle?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type setupCreateManyInput = {
    id?: number
    trueGiftPhone?: string | null
    reCaptchaGoogle?: string | null
    updatedAt?: Date | string
  }

  export type setupUpdateManyMutationInput = {
    trueGiftPhone?: NullableStringFieldUpdateOperationsInput | string | null
    reCaptchaGoogle?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type setupUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    trueGiftPhone?: NullableStringFieldUpdateOperationsInput | string | null
    reCaptchaGoogle?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type UsersRelationFilter = {
    is?: usersWhereInput
    isNot?: usersWhereInput
  }

  export type GameRelationFilter = {
    is?: gameWhereInput
    isNot?: gameWhereInput
  }

  export type buy_logCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    game_id?: SortOrder
    buy_time?: SortOrder
    price?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
  }

  export type buy_logAvgOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    game_id?: SortOrder
    buy_time?: SortOrder
    price?: SortOrder
  }

  export type buy_logMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    game_id?: SortOrder
    buy_time?: SortOrder
    price?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
  }

  export type buy_logMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    game_id?: SortOrder
    buy_time?: SortOrder
    price?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
  }

  export type buy_logSumOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    game_id?: SortOrder
    buy_time?: SortOrder
    price?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type categoryCountOrderByAggregateInput = {
    id?: SortOrder
    category_name?: SortOrder
    visible?: SortOrder
  }

  export type categoryAvgOrderByAggregateInput = {
    id?: SortOrder
    visible?: SortOrder
  }

  export type categoryMaxOrderByAggregateInput = {
    id?: SortOrder
    category_name?: SortOrder
    visible?: SortOrder
  }

  export type categoryMinOrderByAggregateInput = {
    id?: SortOrder
    category_name?: SortOrder
    visible?: SortOrder
  }

  export type categorySumOrderByAggregateInput = {
    id?: SortOrder
    visible?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type Buy_logListRelationFilter = {
    every?: buy_logWhereInput
    some?: buy_logWhereInput
    none?: buy_logWhereInput
  }

  export type Game_actListRelationFilter = {
    every?: game_actWhereInput
    some?: game_actWhereInput
    none?: game_actWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type buy_logOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type game_actOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type gameCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    short_name?: SortOrder
    day_h?: SortOrder
    day_1?: SortOrder
    day_3?: SortOrder
    day_7?: SortOrder
    day_15?: SortOrder
    day_30?: SortOrder
    day_p?: SortOrder
    download_src?: SortOrder
    img_src?: SortOrder
    hack_img_scr?: SortOrder
    status?: SortOrder
    detail?: SortOrder
    game_src?: SortOrder
    visible?: SortOrder
    youtube_link?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type gameAvgOrderByAggregateInput = {
    id?: SortOrder
    day_h?: SortOrder
    day_1?: SortOrder
    day_3?: SortOrder
    day_7?: SortOrder
    day_15?: SortOrder
    day_30?: SortOrder
    day_p?: SortOrder
    visible?: SortOrder
  }

  export type gameMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    short_name?: SortOrder
    day_h?: SortOrder
    day_1?: SortOrder
    day_3?: SortOrder
    day_7?: SortOrder
    day_15?: SortOrder
    day_30?: SortOrder
    day_p?: SortOrder
    download_src?: SortOrder
    img_src?: SortOrder
    hack_img_scr?: SortOrder
    status?: SortOrder
    detail?: SortOrder
    game_src?: SortOrder
    visible?: SortOrder
    youtube_link?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type gameMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    short_name?: SortOrder
    day_h?: SortOrder
    day_1?: SortOrder
    day_3?: SortOrder
    day_7?: SortOrder
    day_15?: SortOrder
    day_30?: SortOrder
    day_p?: SortOrder
    download_src?: SortOrder
    img_src?: SortOrder
    hack_img_scr?: SortOrder
    status?: SortOrder
    detail?: SortOrder
    game_src?: SortOrder
    visible?: SortOrder
    youtube_link?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type gameSumOrderByAggregateInput = {
    id?: SortOrder
    day_h?: SortOrder
    day_1?: SortOrder
    day_3?: SortOrder
    day_7?: SortOrder
    day_15?: SortOrder
    day_30?: SortOrder
    day_p?: SortOrder
    visible?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type game_actCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    game_id?: SortOrder
    exp_date?: SortOrder
    last_update?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type game_actAvgOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    game_id?: SortOrder
    exp_date?: SortOrder
    last_update?: SortOrder
  }

  export type game_actMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    game_id?: SortOrder
    exp_date?: SortOrder
    last_update?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type game_actMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    game_id?: SortOrder
    exp_date?: SortOrder
    last_update?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type game_actSumOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    game_id?: SortOrder
    exp_date?: SortOrder
    last_update?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type redeem_logCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    redeem_amount?: SortOrder
    time?: SortOrder
    link?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type redeem_logAvgOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    redeem_amount?: SortOrder
    time?: SortOrder
  }

  export type redeem_logMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    redeem_amount?: SortOrder
    time?: SortOrder
    link?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type redeem_logMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    redeem_amount?: SortOrder
    time?: SortOrder
    link?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type redeem_logSumOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    redeem_amount?: SortOrder
    time?: SortOrder
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type Redeem_logListRelationFilter = {
    every?: redeem_logWhereInput
    some?: redeem_logWhereInput
    none?: redeem_logWhereInput
  }

  export type redeem_logOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type usersCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    hwid?: SortOrder
    credit?: SortOrder
    role?: SortOrder
    email_verified_at?: SortOrder
    password?: SortOrder
    remember_token?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type usersAvgOrderByAggregateInput = {
    id?: SortOrder
    credit?: SortOrder
    role?: SortOrder
  }

  export type usersMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    hwid?: SortOrder
    credit?: SortOrder
    role?: SortOrder
    email_verified_at?: SortOrder
    password?: SortOrder
    remember_token?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type usersMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    hwid?: SortOrder
    credit?: SortOrder
    role?: SortOrder
    email_verified_at?: SortOrder
    password?: SortOrder
    remember_token?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type usersSumOrderByAggregateInput = {
    id?: SortOrder
    credit?: SortOrder
    role?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type setupCountOrderByAggregateInput = {
    id?: SortOrder
    trueGiftPhone?: SortOrder
    reCaptchaGoogle?: SortOrder
    updatedAt?: SortOrder
  }

  export type setupAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type setupMaxOrderByAggregateInput = {
    id?: SortOrder
    trueGiftPhone?: SortOrder
    reCaptchaGoogle?: SortOrder
    updatedAt?: SortOrder
  }

  export type setupMinOrderByAggregateInput = {
    id?: SortOrder
    trueGiftPhone?: SortOrder
    reCaptchaGoogle?: SortOrder
    updatedAt?: SortOrder
  }

  export type setupSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type usersCreateNestedOneWithoutBuy_logInput = {
    create?: XOR<usersCreateWithoutBuy_logInput, usersUncheckedCreateWithoutBuy_logInput>
    connectOrCreate?: usersCreateOrConnectWithoutBuy_logInput
    connect?: usersWhereUniqueInput
  }

  export type gameCreateNestedOneWithoutBuy_logInput = {
    create?: XOR<gameCreateWithoutBuy_logInput, gameUncheckedCreateWithoutBuy_logInput>
    connectOrCreate?: gameCreateOrConnectWithoutBuy_logInput
    connect?: gameWhereUniqueInput
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type usersUpdateOneRequiredWithoutBuy_logNestedInput = {
    create?: XOR<usersCreateWithoutBuy_logInput, usersUncheckedCreateWithoutBuy_logInput>
    connectOrCreate?: usersCreateOrConnectWithoutBuy_logInput
    upsert?: usersUpsertWithoutBuy_logInput
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutBuy_logInput, usersUpdateWithoutBuy_logInput>, usersUncheckedUpdateWithoutBuy_logInput>
  }

  export type gameUpdateOneRequiredWithoutBuy_logNestedInput = {
    create?: XOR<gameCreateWithoutBuy_logInput, gameUncheckedCreateWithoutBuy_logInput>
    connectOrCreate?: gameCreateOrConnectWithoutBuy_logInput
    upsert?: gameUpsertWithoutBuy_logInput
    connect?: gameWhereUniqueInput
    update?: XOR<XOR<gameUpdateToOneWithWhereWithoutBuy_logInput, gameUpdateWithoutBuy_logInput>, gameUncheckedUpdateWithoutBuy_logInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type buy_logCreateNestedManyWithoutGameInput = {
    create?: XOR<buy_logCreateWithoutGameInput, buy_logUncheckedCreateWithoutGameInput> | buy_logCreateWithoutGameInput[] | buy_logUncheckedCreateWithoutGameInput[]
    connectOrCreate?: buy_logCreateOrConnectWithoutGameInput | buy_logCreateOrConnectWithoutGameInput[]
    createMany?: buy_logCreateManyGameInputEnvelope
    connect?: buy_logWhereUniqueInput | buy_logWhereUniqueInput[]
  }

  export type game_actCreateNestedManyWithoutGameInput = {
    create?: XOR<game_actCreateWithoutGameInput, game_actUncheckedCreateWithoutGameInput> | game_actCreateWithoutGameInput[] | game_actUncheckedCreateWithoutGameInput[]
    connectOrCreate?: game_actCreateOrConnectWithoutGameInput | game_actCreateOrConnectWithoutGameInput[]
    createMany?: game_actCreateManyGameInputEnvelope
    connect?: game_actWhereUniqueInput | game_actWhereUniqueInput[]
  }

  export type buy_logUncheckedCreateNestedManyWithoutGameInput = {
    create?: XOR<buy_logCreateWithoutGameInput, buy_logUncheckedCreateWithoutGameInput> | buy_logCreateWithoutGameInput[] | buy_logUncheckedCreateWithoutGameInput[]
    connectOrCreate?: buy_logCreateOrConnectWithoutGameInput | buy_logCreateOrConnectWithoutGameInput[]
    createMany?: buy_logCreateManyGameInputEnvelope
    connect?: buy_logWhereUniqueInput | buy_logWhereUniqueInput[]
  }

  export type game_actUncheckedCreateNestedManyWithoutGameInput = {
    create?: XOR<game_actCreateWithoutGameInput, game_actUncheckedCreateWithoutGameInput> | game_actCreateWithoutGameInput[] | game_actUncheckedCreateWithoutGameInput[]
    connectOrCreate?: game_actCreateOrConnectWithoutGameInput | game_actCreateOrConnectWithoutGameInput[]
    createMany?: game_actCreateManyGameInputEnvelope
    connect?: game_actWhereUniqueInput | game_actWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type buy_logUpdateManyWithoutGameNestedInput = {
    create?: XOR<buy_logCreateWithoutGameInput, buy_logUncheckedCreateWithoutGameInput> | buy_logCreateWithoutGameInput[] | buy_logUncheckedCreateWithoutGameInput[]
    connectOrCreate?: buy_logCreateOrConnectWithoutGameInput | buy_logCreateOrConnectWithoutGameInput[]
    upsert?: buy_logUpsertWithWhereUniqueWithoutGameInput | buy_logUpsertWithWhereUniqueWithoutGameInput[]
    createMany?: buy_logCreateManyGameInputEnvelope
    set?: buy_logWhereUniqueInput | buy_logWhereUniqueInput[]
    disconnect?: buy_logWhereUniqueInput | buy_logWhereUniqueInput[]
    delete?: buy_logWhereUniqueInput | buy_logWhereUniqueInput[]
    connect?: buy_logWhereUniqueInput | buy_logWhereUniqueInput[]
    update?: buy_logUpdateWithWhereUniqueWithoutGameInput | buy_logUpdateWithWhereUniqueWithoutGameInput[]
    updateMany?: buy_logUpdateManyWithWhereWithoutGameInput | buy_logUpdateManyWithWhereWithoutGameInput[]
    deleteMany?: buy_logScalarWhereInput | buy_logScalarWhereInput[]
  }

  export type game_actUpdateManyWithoutGameNestedInput = {
    create?: XOR<game_actCreateWithoutGameInput, game_actUncheckedCreateWithoutGameInput> | game_actCreateWithoutGameInput[] | game_actUncheckedCreateWithoutGameInput[]
    connectOrCreate?: game_actCreateOrConnectWithoutGameInput | game_actCreateOrConnectWithoutGameInput[]
    upsert?: game_actUpsertWithWhereUniqueWithoutGameInput | game_actUpsertWithWhereUniqueWithoutGameInput[]
    createMany?: game_actCreateManyGameInputEnvelope
    set?: game_actWhereUniqueInput | game_actWhereUniqueInput[]
    disconnect?: game_actWhereUniqueInput | game_actWhereUniqueInput[]
    delete?: game_actWhereUniqueInput | game_actWhereUniqueInput[]
    connect?: game_actWhereUniqueInput | game_actWhereUniqueInput[]
    update?: game_actUpdateWithWhereUniqueWithoutGameInput | game_actUpdateWithWhereUniqueWithoutGameInput[]
    updateMany?: game_actUpdateManyWithWhereWithoutGameInput | game_actUpdateManyWithWhereWithoutGameInput[]
    deleteMany?: game_actScalarWhereInput | game_actScalarWhereInput[]
  }

  export type buy_logUncheckedUpdateManyWithoutGameNestedInput = {
    create?: XOR<buy_logCreateWithoutGameInput, buy_logUncheckedCreateWithoutGameInput> | buy_logCreateWithoutGameInput[] | buy_logUncheckedCreateWithoutGameInput[]
    connectOrCreate?: buy_logCreateOrConnectWithoutGameInput | buy_logCreateOrConnectWithoutGameInput[]
    upsert?: buy_logUpsertWithWhereUniqueWithoutGameInput | buy_logUpsertWithWhereUniqueWithoutGameInput[]
    createMany?: buy_logCreateManyGameInputEnvelope
    set?: buy_logWhereUniqueInput | buy_logWhereUniqueInput[]
    disconnect?: buy_logWhereUniqueInput | buy_logWhereUniqueInput[]
    delete?: buy_logWhereUniqueInput | buy_logWhereUniqueInput[]
    connect?: buy_logWhereUniqueInput | buy_logWhereUniqueInput[]
    update?: buy_logUpdateWithWhereUniqueWithoutGameInput | buy_logUpdateWithWhereUniqueWithoutGameInput[]
    updateMany?: buy_logUpdateManyWithWhereWithoutGameInput | buy_logUpdateManyWithWhereWithoutGameInput[]
    deleteMany?: buy_logScalarWhereInput | buy_logScalarWhereInput[]
  }

  export type game_actUncheckedUpdateManyWithoutGameNestedInput = {
    create?: XOR<game_actCreateWithoutGameInput, game_actUncheckedCreateWithoutGameInput> | game_actCreateWithoutGameInput[] | game_actUncheckedCreateWithoutGameInput[]
    connectOrCreate?: game_actCreateOrConnectWithoutGameInput | game_actCreateOrConnectWithoutGameInput[]
    upsert?: game_actUpsertWithWhereUniqueWithoutGameInput | game_actUpsertWithWhereUniqueWithoutGameInput[]
    createMany?: game_actCreateManyGameInputEnvelope
    set?: game_actWhereUniqueInput | game_actWhereUniqueInput[]
    disconnect?: game_actWhereUniqueInput | game_actWhereUniqueInput[]
    delete?: game_actWhereUniqueInput | game_actWhereUniqueInput[]
    connect?: game_actWhereUniqueInput | game_actWhereUniqueInput[]
    update?: game_actUpdateWithWhereUniqueWithoutGameInput | game_actUpdateWithWhereUniqueWithoutGameInput[]
    updateMany?: game_actUpdateManyWithWhereWithoutGameInput | game_actUpdateManyWithWhereWithoutGameInput[]
    deleteMany?: game_actScalarWhereInput | game_actScalarWhereInput[]
  }

  export type usersCreateNestedOneWithoutGame_actInput = {
    create?: XOR<usersCreateWithoutGame_actInput, usersUncheckedCreateWithoutGame_actInput>
    connectOrCreate?: usersCreateOrConnectWithoutGame_actInput
    connect?: usersWhereUniqueInput
  }

  export type gameCreateNestedOneWithoutGame_actInput = {
    create?: XOR<gameCreateWithoutGame_actInput, gameUncheckedCreateWithoutGame_actInput>
    connectOrCreate?: gameCreateOrConnectWithoutGame_actInput
    connect?: gameWhereUniqueInput
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type usersUpdateOneRequiredWithoutGame_actNestedInput = {
    create?: XOR<usersCreateWithoutGame_actInput, usersUncheckedCreateWithoutGame_actInput>
    connectOrCreate?: usersCreateOrConnectWithoutGame_actInput
    upsert?: usersUpsertWithoutGame_actInput
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutGame_actInput, usersUpdateWithoutGame_actInput>, usersUncheckedUpdateWithoutGame_actInput>
  }

  export type gameUpdateOneRequiredWithoutGame_actNestedInput = {
    create?: XOR<gameCreateWithoutGame_actInput, gameUncheckedCreateWithoutGame_actInput>
    connectOrCreate?: gameCreateOrConnectWithoutGame_actInput
    upsert?: gameUpsertWithoutGame_actInput
    connect?: gameWhereUniqueInput
    update?: XOR<XOR<gameUpdateToOneWithWhereWithoutGame_actInput, gameUpdateWithoutGame_actInput>, gameUncheckedUpdateWithoutGame_actInput>
  }

  export type usersCreateNestedOneWithoutRedeem_logInput = {
    create?: XOR<usersCreateWithoutRedeem_logInput, usersUncheckedCreateWithoutRedeem_logInput>
    connectOrCreate?: usersCreateOrConnectWithoutRedeem_logInput
    connect?: usersWhereUniqueInput
  }

  export type usersUpdateOneRequiredWithoutRedeem_logNestedInput = {
    create?: XOR<usersCreateWithoutRedeem_logInput, usersUncheckedCreateWithoutRedeem_logInput>
    connectOrCreate?: usersCreateOrConnectWithoutRedeem_logInput
    upsert?: usersUpsertWithoutRedeem_logInput
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutRedeem_logInput, usersUpdateWithoutRedeem_logInput>, usersUncheckedUpdateWithoutRedeem_logInput>
  }

  export type buy_logCreateNestedManyWithoutUsersInput = {
    create?: XOR<buy_logCreateWithoutUsersInput, buy_logUncheckedCreateWithoutUsersInput> | buy_logCreateWithoutUsersInput[] | buy_logUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: buy_logCreateOrConnectWithoutUsersInput | buy_logCreateOrConnectWithoutUsersInput[]
    createMany?: buy_logCreateManyUsersInputEnvelope
    connect?: buy_logWhereUniqueInput | buy_logWhereUniqueInput[]
  }

  export type game_actCreateNestedManyWithoutUsersInput = {
    create?: XOR<game_actCreateWithoutUsersInput, game_actUncheckedCreateWithoutUsersInput> | game_actCreateWithoutUsersInput[] | game_actUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: game_actCreateOrConnectWithoutUsersInput | game_actCreateOrConnectWithoutUsersInput[]
    createMany?: game_actCreateManyUsersInputEnvelope
    connect?: game_actWhereUniqueInput | game_actWhereUniqueInput[]
  }

  export type redeem_logCreateNestedManyWithoutUsersInput = {
    create?: XOR<redeem_logCreateWithoutUsersInput, redeem_logUncheckedCreateWithoutUsersInput> | redeem_logCreateWithoutUsersInput[] | redeem_logUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: redeem_logCreateOrConnectWithoutUsersInput | redeem_logCreateOrConnectWithoutUsersInput[]
    createMany?: redeem_logCreateManyUsersInputEnvelope
    connect?: redeem_logWhereUniqueInput | redeem_logWhereUniqueInput[]
  }

  export type buy_logUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<buy_logCreateWithoutUsersInput, buy_logUncheckedCreateWithoutUsersInput> | buy_logCreateWithoutUsersInput[] | buy_logUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: buy_logCreateOrConnectWithoutUsersInput | buy_logCreateOrConnectWithoutUsersInput[]
    createMany?: buy_logCreateManyUsersInputEnvelope
    connect?: buy_logWhereUniqueInput | buy_logWhereUniqueInput[]
  }

  export type game_actUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<game_actCreateWithoutUsersInput, game_actUncheckedCreateWithoutUsersInput> | game_actCreateWithoutUsersInput[] | game_actUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: game_actCreateOrConnectWithoutUsersInput | game_actCreateOrConnectWithoutUsersInput[]
    createMany?: game_actCreateManyUsersInputEnvelope
    connect?: game_actWhereUniqueInput | game_actWhereUniqueInput[]
  }

  export type redeem_logUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<redeem_logCreateWithoutUsersInput, redeem_logUncheckedCreateWithoutUsersInput> | redeem_logCreateWithoutUsersInput[] | redeem_logUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: redeem_logCreateOrConnectWithoutUsersInput | redeem_logCreateOrConnectWithoutUsersInput[]
    createMany?: redeem_logCreateManyUsersInputEnvelope
    connect?: redeem_logWhereUniqueInput | redeem_logWhereUniqueInput[]
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type buy_logUpdateManyWithoutUsersNestedInput = {
    create?: XOR<buy_logCreateWithoutUsersInput, buy_logUncheckedCreateWithoutUsersInput> | buy_logCreateWithoutUsersInput[] | buy_logUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: buy_logCreateOrConnectWithoutUsersInput | buy_logCreateOrConnectWithoutUsersInput[]
    upsert?: buy_logUpsertWithWhereUniqueWithoutUsersInput | buy_logUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: buy_logCreateManyUsersInputEnvelope
    set?: buy_logWhereUniqueInput | buy_logWhereUniqueInput[]
    disconnect?: buy_logWhereUniqueInput | buy_logWhereUniqueInput[]
    delete?: buy_logWhereUniqueInput | buy_logWhereUniqueInput[]
    connect?: buy_logWhereUniqueInput | buy_logWhereUniqueInput[]
    update?: buy_logUpdateWithWhereUniqueWithoutUsersInput | buy_logUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: buy_logUpdateManyWithWhereWithoutUsersInput | buy_logUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: buy_logScalarWhereInput | buy_logScalarWhereInput[]
  }

  export type game_actUpdateManyWithoutUsersNestedInput = {
    create?: XOR<game_actCreateWithoutUsersInput, game_actUncheckedCreateWithoutUsersInput> | game_actCreateWithoutUsersInput[] | game_actUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: game_actCreateOrConnectWithoutUsersInput | game_actCreateOrConnectWithoutUsersInput[]
    upsert?: game_actUpsertWithWhereUniqueWithoutUsersInput | game_actUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: game_actCreateManyUsersInputEnvelope
    set?: game_actWhereUniqueInput | game_actWhereUniqueInput[]
    disconnect?: game_actWhereUniqueInput | game_actWhereUniqueInput[]
    delete?: game_actWhereUniqueInput | game_actWhereUniqueInput[]
    connect?: game_actWhereUniqueInput | game_actWhereUniqueInput[]
    update?: game_actUpdateWithWhereUniqueWithoutUsersInput | game_actUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: game_actUpdateManyWithWhereWithoutUsersInput | game_actUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: game_actScalarWhereInput | game_actScalarWhereInput[]
  }

  export type redeem_logUpdateManyWithoutUsersNestedInput = {
    create?: XOR<redeem_logCreateWithoutUsersInput, redeem_logUncheckedCreateWithoutUsersInput> | redeem_logCreateWithoutUsersInput[] | redeem_logUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: redeem_logCreateOrConnectWithoutUsersInput | redeem_logCreateOrConnectWithoutUsersInput[]
    upsert?: redeem_logUpsertWithWhereUniqueWithoutUsersInput | redeem_logUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: redeem_logCreateManyUsersInputEnvelope
    set?: redeem_logWhereUniqueInput | redeem_logWhereUniqueInput[]
    disconnect?: redeem_logWhereUniqueInput | redeem_logWhereUniqueInput[]
    delete?: redeem_logWhereUniqueInput | redeem_logWhereUniqueInput[]
    connect?: redeem_logWhereUniqueInput | redeem_logWhereUniqueInput[]
    update?: redeem_logUpdateWithWhereUniqueWithoutUsersInput | redeem_logUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: redeem_logUpdateManyWithWhereWithoutUsersInput | redeem_logUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: redeem_logScalarWhereInput | redeem_logScalarWhereInput[]
  }

  export type buy_logUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<buy_logCreateWithoutUsersInput, buy_logUncheckedCreateWithoutUsersInput> | buy_logCreateWithoutUsersInput[] | buy_logUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: buy_logCreateOrConnectWithoutUsersInput | buy_logCreateOrConnectWithoutUsersInput[]
    upsert?: buy_logUpsertWithWhereUniqueWithoutUsersInput | buy_logUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: buy_logCreateManyUsersInputEnvelope
    set?: buy_logWhereUniqueInput | buy_logWhereUniqueInput[]
    disconnect?: buy_logWhereUniqueInput | buy_logWhereUniqueInput[]
    delete?: buy_logWhereUniqueInput | buy_logWhereUniqueInput[]
    connect?: buy_logWhereUniqueInput | buy_logWhereUniqueInput[]
    update?: buy_logUpdateWithWhereUniqueWithoutUsersInput | buy_logUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: buy_logUpdateManyWithWhereWithoutUsersInput | buy_logUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: buy_logScalarWhereInput | buy_logScalarWhereInput[]
  }

  export type game_actUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<game_actCreateWithoutUsersInput, game_actUncheckedCreateWithoutUsersInput> | game_actCreateWithoutUsersInput[] | game_actUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: game_actCreateOrConnectWithoutUsersInput | game_actCreateOrConnectWithoutUsersInput[]
    upsert?: game_actUpsertWithWhereUniqueWithoutUsersInput | game_actUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: game_actCreateManyUsersInputEnvelope
    set?: game_actWhereUniqueInput | game_actWhereUniqueInput[]
    disconnect?: game_actWhereUniqueInput | game_actWhereUniqueInput[]
    delete?: game_actWhereUniqueInput | game_actWhereUniqueInput[]
    connect?: game_actWhereUniqueInput | game_actWhereUniqueInput[]
    update?: game_actUpdateWithWhereUniqueWithoutUsersInput | game_actUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: game_actUpdateManyWithWhereWithoutUsersInput | game_actUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: game_actScalarWhereInput | game_actScalarWhereInput[]
  }

  export type redeem_logUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<redeem_logCreateWithoutUsersInput, redeem_logUncheckedCreateWithoutUsersInput> | redeem_logCreateWithoutUsersInput[] | redeem_logUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: redeem_logCreateOrConnectWithoutUsersInput | redeem_logCreateOrConnectWithoutUsersInput[]
    upsert?: redeem_logUpsertWithWhereUniqueWithoutUsersInput | redeem_logUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: redeem_logCreateManyUsersInputEnvelope
    set?: redeem_logWhereUniqueInput | redeem_logWhereUniqueInput[]
    disconnect?: redeem_logWhereUniqueInput | redeem_logWhereUniqueInput[]
    delete?: redeem_logWhereUniqueInput | redeem_logWhereUniqueInput[]
    connect?: redeem_logWhereUniqueInput | redeem_logWhereUniqueInput[]
    update?: redeem_logUpdateWithWhereUniqueWithoutUsersInput | redeem_logUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: redeem_logUpdateManyWithWhereWithoutUsersInput | redeem_logUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: redeem_logScalarWhereInput | redeem_logScalarWhereInput[]
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type usersCreateWithoutBuy_logInput = {
    name: string
    email: string
    hwid?: string | null
    credit?: number
    role?: number
    email_verified_at?: Date | string | null
    password: string
    remember_token?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    game_act?: game_actCreateNestedManyWithoutUsersInput
    redeem_log?: redeem_logCreateNestedManyWithoutUsersInput
  }

  export type usersUncheckedCreateWithoutBuy_logInput = {
    id?: number
    name: string
    email: string
    hwid?: string | null
    credit?: number
    role?: number
    email_verified_at?: Date | string | null
    password: string
    remember_token?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    game_act?: game_actUncheckedCreateNestedManyWithoutUsersInput
    redeem_log?: redeem_logUncheckedCreateNestedManyWithoutUsersInput
  }

  export type usersCreateOrConnectWithoutBuy_logInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutBuy_logInput, usersUncheckedCreateWithoutBuy_logInput>
  }

  export type gameCreateWithoutBuy_logInput = {
    name: string
    short_name: string
    day_h: number
    day_1: number
    day_3: number
    day_7: number
    day_15: number
    day_30: number
    day_p: number
    download_src: string
    img_src: string
    hack_img_scr: string
    status: string
    detail: string
    game_src: string
    visible?: number
    youtube_link?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    game_act?: game_actCreateNestedManyWithoutGameInput
  }

  export type gameUncheckedCreateWithoutBuy_logInput = {
    id?: number
    name: string
    short_name: string
    day_h: number
    day_1: number
    day_3: number
    day_7: number
    day_15: number
    day_30: number
    day_p: number
    download_src: string
    img_src: string
    hack_img_scr: string
    status: string
    detail: string
    game_src: string
    visible?: number
    youtube_link?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    game_act?: game_actUncheckedCreateNestedManyWithoutGameInput
  }

  export type gameCreateOrConnectWithoutBuy_logInput = {
    where: gameWhereUniqueInput
    create: XOR<gameCreateWithoutBuy_logInput, gameUncheckedCreateWithoutBuy_logInput>
  }

  export type usersUpsertWithoutBuy_logInput = {
    update: XOR<usersUpdateWithoutBuy_logInput, usersUncheckedUpdateWithoutBuy_logInput>
    create: XOR<usersCreateWithoutBuy_logInput, usersUncheckedCreateWithoutBuy_logInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutBuy_logInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutBuy_logInput, usersUncheckedUpdateWithoutBuy_logInput>
  }

  export type usersUpdateWithoutBuy_logInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    hwid?: NullableStringFieldUpdateOperationsInput | string | null
    credit?: IntFieldUpdateOperationsInput | number
    role?: IntFieldUpdateOperationsInput | number
    email_verified_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: StringFieldUpdateOperationsInput | string
    remember_token?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    game_act?: game_actUpdateManyWithoutUsersNestedInput
    redeem_log?: redeem_logUpdateManyWithoutUsersNestedInput
  }

  export type usersUncheckedUpdateWithoutBuy_logInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    hwid?: NullableStringFieldUpdateOperationsInput | string | null
    credit?: IntFieldUpdateOperationsInput | number
    role?: IntFieldUpdateOperationsInput | number
    email_verified_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: StringFieldUpdateOperationsInput | string
    remember_token?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    game_act?: game_actUncheckedUpdateManyWithoutUsersNestedInput
    redeem_log?: redeem_logUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type gameUpsertWithoutBuy_logInput = {
    update: XOR<gameUpdateWithoutBuy_logInput, gameUncheckedUpdateWithoutBuy_logInput>
    create: XOR<gameCreateWithoutBuy_logInput, gameUncheckedCreateWithoutBuy_logInput>
    where?: gameWhereInput
  }

  export type gameUpdateToOneWithWhereWithoutBuy_logInput = {
    where?: gameWhereInput
    data: XOR<gameUpdateWithoutBuy_logInput, gameUncheckedUpdateWithoutBuy_logInput>
  }

  export type gameUpdateWithoutBuy_logInput = {
    name?: StringFieldUpdateOperationsInput | string
    short_name?: StringFieldUpdateOperationsInput | string
    day_h?: IntFieldUpdateOperationsInput | number
    day_1?: IntFieldUpdateOperationsInput | number
    day_3?: IntFieldUpdateOperationsInput | number
    day_7?: IntFieldUpdateOperationsInput | number
    day_15?: IntFieldUpdateOperationsInput | number
    day_30?: IntFieldUpdateOperationsInput | number
    day_p?: IntFieldUpdateOperationsInput | number
    download_src?: StringFieldUpdateOperationsInput | string
    img_src?: StringFieldUpdateOperationsInput | string
    hack_img_scr?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    detail?: StringFieldUpdateOperationsInput | string
    game_src?: StringFieldUpdateOperationsInput | string
    visible?: IntFieldUpdateOperationsInput | number
    youtube_link?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    game_act?: game_actUpdateManyWithoutGameNestedInput
  }

  export type gameUncheckedUpdateWithoutBuy_logInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    short_name?: StringFieldUpdateOperationsInput | string
    day_h?: IntFieldUpdateOperationsInput | number
    day_1?: IntFieldUpdateOperationsInput | number
    day_3?: IntFieldUpdateOperationsInput | number
    day_7?: IntFieldUpdateOperationsInput | number
    day_15?: IntFieldUpdateOperationsInput | number
    day_30?: IntFieldUpdateOperationsInput | number
    day_p?: IntFieldUpdateOperationsInput | number
    download_src?: StringFieldUpdateOperationsInput | string
    img_src?: StringFieldUpdateOperationsInput | string
    hack_img_scr?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    detail?: StringFieldUpdateOperationsInput | string
    game_src?: StringFieldUpdateOperationsInput | string
    visible?: IntFieldUpdateOperationsInput | number
    youtube_link?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    game_act?: game_actUncheckedUpdateManyWithoutGameNestedInput
  }

  export type buy_logCreateWithoutGameInput = {
    buy_time: number
    price: number
    isActive?: boolean
    createdAt?: Date | string
    users: usersCreateNestedOneWithoutBuy_logInput
  }

  export type buy_logUncheckedCreateWithoutGameInput = {
    id?: number
    user_id: number
    buy_time: number
    price: number
    isActive?: boolean
    createdAt?: Date | string
  }

  export type buy_logCreateOrConnectWithoutGameInput = {
    where: buy_logWhereUniqueInput
    create: XOR<buy_logCreateWithoutGameInput, buy_logUncheckedCreateWithoutGameInput>
  }

  export type buy_logCreateManyGameInputEnvelope = {
    data: buy_logCreateManyGameInput | buy_logCreateManyGameInput[]
    skipDuplicates?: boolean
  }

  export type game_actCreateWithoutGameInput = {
    exp_date: number
    last_update?: number | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    users: usersCreateNestedOneWithoutGame_actInput
  }

  export type game_actUncheckedCreateWithoutGameInput = {
    id?: number
    user_id: number
    exp_date: number
    last_update?: number | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type game_actCreateOrConnectWithoutGameInput = {
    where: game_actWhereUniqueInput
    create: XOR<game_actCreateWithoutGameInput, game_actUncheckedCreateWithoutGameInput>
  }

  export type game_actCreateManyGameInputEnvelope = {
    data: game_actCreateManyGameInput | game_actCreateManyGameInput[]
    skipDuplicates?: boolean
  }

  export type buy_logUpsertWithWhereUniqueWithoutGameInput = {
    where: buy_logWhereUniqueInput
    update: XOR<buy_logUpdateWithoutGameInput, buy_logUncheckedUpdateWithoutGameInput>
    create: XOR<buy_logCreateWithoutGameInput, buy_logUncheckedCreateWithoutGameInput>
  }

  export type buy_logUpdateWithWhereUniqueWithoutGameInput = {
    where: buy_logWhereUniqueInput
    data: XOR<buy_logUpdateWithoutGameInput, buy_logUncheckedUpdateWithoutGameInput>
  }

  export type buy_logUpdateManyWithWhereWithoutGameInput = {
    where: buy_logScalarWhereInput
    data: XOR<buy_logUpdateManyMutationInput, buy_logUncheckedUpdateManyWithoutGameInput>
  }

  export type buy_logScalarWhereInput = {
    AND?: buy_logScalarWhereInput | buy_logScalarWhereInput[]
    OR?: buy_logScalarWhereInput[]
    NOT?: buy_logScalarWhereInput | buy_logScalarWhereInput[]
    id?: IntFilter<"buy_log"> | number
    user_id?: IntFilter<"buy_log"> | number
    game_id?: IntFilter<"buy_log"> | number
    buy_time?: IntFilter<"buy_log"> | number
    price?: IntFilter<"buy_log"> | number
    isActive?: BoolFilter<"buy_log"> | boolean
    createdAt?: DateTimeFilter<"buy_log"> | Date | string
  }

  export type game_actUpsertWithWhereUniqueWithoutGameInput = {
    where: game_actWhereUniqueInput
    update: XOR<game_actUpdateWithoutGameInput, game_actUncheckedUpdateWithoutGameInput>
    create: XOR<game_actCreateWithoutGameInput, game_actUncheckedCreateWithoutGameInput>
  }

  export type game_actUpdateWithWhereUniqueWithoutGameInput = {
    where: game_actWhereUniqueInput
    data: XOR<game_actUpdateWithoutGameInput, game_actUncheckedUpdateWithoutGameInput>
  }

  export type game_actUpdateManyWithWhereWithoutGameInput = {
    where: game_actScalarWhereInput
    data: XOR<game_actUpdateManyMutationInput, game_actUncheckedUpdateManyWithoutGameInput>
  }

  export type game_actScalarWhereInput = {
    AND?: game_actScalarWhereInput | game_actScalarWhereInput[]
    OR?: game_actScalarWhereInput[]
    NOT?: game_actScalarWhereInput | game_actScalarWhereInput[]
    id?: IntFilter<"game_act"> | number
    user_id?: IntFilter<"game_act"> | number
    game_id?: IntFilter<"game_act"> | number
    exp_date?: IntFilter<"game_act"> | number
    last_update?: IntNullableFilter<"game_act"> | number | null
    isActive?: BoolFilter<"game_act"> | boolean
    createdAt?: DateTimeFilter<"game_act"> | Date | string
    updatedAt?: DateTimeFilter<"game_act"> | Date | string
  }

  export type usersCreateWithoutGame_actInput = {
    name: string
    email: string
    hwid?: string | null
    credit?: number
    role?: number
    email_verified_at?: Date | string | null
    password: string
    remember_token?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    buy_log?: buy_logCreateNestedManyWithoutUsersInput
    redeem_log?: redeem_logCreateNestedManyWithoutUsersInput
  }

  export type usersUncheckedCreateWithoutGame_actInput = {
    id?: number
    name: string
    email: string
    hwid?: string | null
    credit?: number
    role?: number
    email_verified_at?: Date | string | null
    password: string
    remember_token?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    buy_log?: buy_logUncheckedCreateNestedManyWithoutUsersInput
    redeem_log?: redeem_logUncheckedCreateNestedManyWithoutUsersInput
  }

  export type usersCreateOrConnectWithoutGame_actInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutGame_actInput, usersUncheckedCreateWithoutGame_actInput>
  }

  export type gameCreateWithoutGame_actInput = {
    name: string
    short_name: string
    day_h: number
    day_1: number
    day_3: number
    day_7: number
    day_15: number
    day_30: number
    day_p: number
    download_src: string
    img_src: string
    hack_img_scr: string
    status: string
    detail: string
    game_src: string
    visible?: number
    youtube_link?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    buy_log?: buy_logCreateNestedManyWithoutGameInput
  }

  export type gameUncheckedCreateWithoutGame_actInput = {
    id?: number
    name: string
    short_name: string
    day_h: number
    day_1: number
    day_3: number
    day_7: number
    day_15: number
    day_30: number
    day_p: number
    download_src: string
    img_src: string
    hack_img_scr: string
    status: string
    detail: string
    game_src: string
    visible?: number
    youtube_link?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    buy_log?: buy_logUncheckedCreateNestedManyWithoutGameInput
  }

  export type gameCreateOrConnectWithoutGame_actInput = {
    where: gameWhereUniqueInput
    create: XOR<gameCreateWithoutGame_actInput, gameUncheckedCreateWithoutGame_actInput>
  }

  export type usersUpsertWithoutGame_actInput = {
    update: XOR<usersUpdateWithoutGame_actInput, usersUncheckedUpdateWithoutGame_actInput>
    create: XOR<usersCreateWithoutGame_actInput, usersUncheckedCreateWithoutGame_actInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutGame_actInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutGame_actInput, usersUncheckedUpdateWithoutGame_actInput>
  }

  export type usersUpdateWithoutGame_actInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    hwid?: NullableStringFieldUpdateOperationsInput | string | null
    credit?: IntFieldUpdateOperationsInput | number
    role?: IntFieldUpdateOperationsInput | number
    email_verified_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: StringFieldUpdateOperationsInput | string
    remember_token?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    buy_log?: buy_logUpdateManyWithoutUsersNestedInput
    redeem_log?: redeem_logUpdateManyWithoutUsersNestedInput
  }

  export type usersUncheckedUpdateWithoutGame_actInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    hwid?: NullableStringFieldUpdateOperationsInput | string | null
    credit?: IntFieldUpdateOperationsInput | number
    role?: IntFieldUpdateOperationsInput | number
    email_verified_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: StringFieldUpdateOperationsInput | string
    remember_token?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    buy_log?: buy_logUncheckedUpdateManyWithoutUsersNestedInput
    redeem_log?: redeem_logUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type gameUpsertWithoutGame_actInput = {
    update: XOR<gameUpdateWithoutGame_actInput, gameUncheckedUpdateWithoutGame_actInput>
    create: XOR<gameCreateWithoutGame_actInput, gameUncheckedCreateWithoutGame_actInput>
    where?: gameWhereInput
  }

  export type gameUpdateToOneWithWhereWithoutGame_actInput = {
    where?: gameWhereInput
    data: XOR<gameUpdateWithoutGame_actInput, gameUncheckedUpdateWithoutGame_actInput>
  }

  export type gameUpdateWithoutGame_actInput = {
    name?: StringFieldUpdateOperationsInput | string
    short_name?: StringFieldUpdateOperationsInput | string
    day_h?: IntFieldUpdateOperationsInput | number
    day_1?: IntFieldUpdateOperationsInput | number
    day_3?: IntFieldUpdateOperationsInput | number
    day_7?: IntFieldUpdateOperationsInput | number
    day_15?: IntFieldUpdateOperationsInput | number
    day_30?: IntFieldUpdateOperationsInput | number
    day_p?: IntFieldUpdateOperationsInput | number
    download_src?: StringFieldUpdateOperationsInput | string
    img_src?: StringFieldUpdateOperationsInput | string
    hack_img_scr?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    detail?: StringFieldUpdateOperationsInput | string
    game_src?: StringFieldUpdateOperationsInput | string
    visible?: IntFieldUpdateOperationsInput | number
    youtube_link?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    buy_log?: buy_logUpdateManyWithoutGameNestedInput
  }

  export type gameUncheckedUpdateWithoutGame_actInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    short_name?: StringFieldUpdateOperationsInput | string
    day_h?: IntFieldUpdateOperationsInput | number
    day_1?: IntFieldUpdateOperationsInput | number
    day_3?: IntFieldUpdateOperationsInput | number
    day_7?: IntFieldUpdateOperationsInput | number
    day_15?: IntFieldUpdateOperationsInput | number
    day_30?: IntFieldUpdateOperationsInput | number
    day_p?: IntFieldUpdateOperationsInput | number
    download_src?: StringFieldUpdateOperationsInput | string
    img_src?: StringFieldUpdateOperationsInput | string
    hack_img_scr?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    detail?: StringFieldUpdateOperationsInput | string
    game_src?: StringFieldUpdateOperationsInput | string
    visible?: IntFieldUpdateOperationsInput | number
    youtube_link?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    buy_log?: buy_logUncheckedUpdateManyWithoutGameNestedInput
  }

  export type usersCreateWithoutRedeem_logInput = {
    name: string
    email: string
    hwid?: string | null
    credit?: number
    role?: number
    email_verified_at?: Date | string | null
    password: string
    remember_token?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    buy_log?: buy_logCreateNestedManyWithoutUsersInput
    game_act?: game_actCreateNestedManyWithoutUsersInput
  }

  export type usersUncheckedCreateWithoutRedeem_logInput = {
    id?: number
    name: string
    email: string
    hwid?: string | null
    credit?: number
    role?: number
    email_verified_at?: Date | string | null
    password: string
    remember_token?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    buy_log?: buy_logUncheckedCreateNestedManyWithoutUsersInput
    game_act?: game_actUncheckedCreateNestedManyWithoutUsersInput
  }

  export type usersCreateOrConnectWithoutRedeem_logInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutRedeem_logInput, usersUncheckedCreateWithoutRedeem_logInput>
  }

  export type usersUpsertWithoutRedeem_logInput = {
    update: XOR<usersUpdateWithoutRedeem_logInput, usersUncheckedUpdateWithoutRedeem_logInput>
    create: XOR<usersCreateWithoutRedeem_logInput, usersUncheckedCreateWithoutRedeem_logInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutRedeem_logInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutRedeem_logInput, usersUncheckedUpdateWithoutRedeem_logInput>
  }

  export type usersUpdateWithoutRedeem_logInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    hwid?: NullableStringFieldUpdateOperationsInput | string | null
    credit?: IntFieldUpdateOperationsInput | number
    role?: IntFieldUpdateOperationsInput | number
    email_verified_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: StringFieldUpdateOperationsInput | string
    remember_token?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    buy_log?: buy_logUpdateManyWithoutUsersNestedInput
    game_act?: game_actUpdateManyWithoutUsersNestedInput
  }

  export type usersUncheckedUpdateWithoutRedeem_logInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    hwid?: NullableStringFieldUpdateOperationsInput | string | null
    credit?: IntFieldUpdateOperationsInput | number
    role?: IntFieldUpdateOperationsInput | number
    email_verified_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: StringFieldUpdateOperationsInput | string
    remember_token?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    buy_log?: buy_logUncheckedUpdateManyWithoutUsersNestedInput
    game_act?: game_actUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type buy_logCreateWithoutUsersInput = {
    buy_time: number
    price: number
    isActive?: boolean
    createdAt?: Date | string
    game: gameCreateNestedOneWithoutBuy_logInput
  }

  export type buy_logUncheckedCreateWithoutUsersInput = {
    id?: number
    game_id: number
    buy_time: number
    price: number
    isActive?: boolean
    createdAt?: Date | string
  }

  export type buy_logCreateOrConnectWithoutUsersInput = {
    where: buy_logWhereUniqueInput
    create: XOR<buy_logCreateWithoutUsersInput, buy_logUncheckedCreateWithoutUsersInput>
  }

  export type buy_logCreateManyUsersInputEnvelope = {
    data: buy_logCreateManyUsersInput | buy_logCreateManyUsersInput[]
    skipDuplicates?: boolean
  }

  export type game_actCreateWithoutUsersInput = {
    exp_date: number
    last_update?: number | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    game: gameCreateNestedOneWithoutGame_actInput
  }

  export type game_actUncheckedCreateWithoutUsersInput = {
    id?: number
    game_id: number
    exp_date: number
    last_update?: number | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type game_actCreateOrConnectWithoutUsersInput = {
    where: game_actWhereUniqueInput
    create: XOR<game_actCreateWithoutUsersInput, game_actUncheckedCreateWithoutUsersInput>
  }

  export type game_actCreateManyUsersInputEnvelope = {
    data: game_actCreateManyUsersInput | game_actCreateManyUsersInput[]
    skipDuplicates?: boolean
  }

  export type redeem_logCreateWithoutUsersInput = {
    redeem_amount: number
    time?: number | null
    link?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type redeem_logUncheckedCreateWithoutUsersInput = {
    id?: number
    redeem_amount: number
    time?: number | null
    link?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type redeem_logCreateOrConnectWithoutUsersInput = {
    where: redeem_logWhereUniqueInput
    create: XOR<redeem_logCreateWithoutUsersInput, redeem_logUncheckedCreateWithoutUsersInput>
  }

  export type redeem_logCreateManyUsersInputEnvelope = {
    data: redeem_logCreateManyUsersInput | redeem_logCreateManyUsersInput[]
    skipDuplicates?: boolean
  }

  export type buy_logUpsertWithWhereUniqueWithoutUsersInput = {
    where: buy_logWhereUniqueInput
    update: XOR<buy_logUpdateWithoutUsersInput, buy_logUncheckedUpdateWithoutUsersInput>
    create: XOR<buy_logCreateWithoutUsersInput, buy_logUncheckedCreateWithoutUsersInput>
  }

  export type buy_logUpdateWithWhereUniqueWithoutUsersInput = {
    where: buy_logWhereUniqueInput
    data: XOR<buy_logUpdateWithoutUsersInput, buy_logUncheckedUpdateWithoutUsersInput>
  }

  export type buy_logUpdateManyWithWhereWithoutUsersInput = {
    where: buy_logScalarWhereInput
    data: XOR<buy_logUpdateManyMutationInput, buy_logUncheckedUpdateManyWithoutUsersInput>
  }

  export type game_actUpsertWithWhereUniqueWithoutUsersInput = {
    where: game_actWhereUniqueInput
    update: XOR<game_actUpdateWithoutUsersInput, game_actUncheckedUpdateWithoutUsersInput>
    create: XOR<game_actCreateWithoutUsersInput, game_actUncheckedCreateWithoutUsersInput>
  }

  export type game_actUpdateWithWhereUniqueWithoutUsersInput = {
    where: game_actWhereUniqueInput
    data: XOR<game_actUpdateWithoutUsersInput, game_actUncheckedUpdateWithoutUsersInput>
  }

  export type game_actUpdateManyWithWhereWithoutUsersInput = {
    where: game_actScalarWhereInput
    data: XOR<game_actUpdateManyMutationInput, game_actUncheckedUpdateManyWithoutUsersInput>
  }

  export type redeem_logUpsertWithWhereUniqueWithoutUsersInput = {
    where: redeem_logWhereUniqueInput
    update: XOR<redeem_logUpdateWithoutUsersInput, redeem_logUncheckedUpdateWithoutUsersInput>
    create: XOR<redeem_logCreateWithoutUsersInput, redeem_logUncheckedCreateWithoutUsersInput>
  }

  export type redeem_logUpdateWithWhereUniqueWithoutUsersInput = {
    where: redeem_logWhereUniqueInput
    data: XOR<redeem_logUpdateWithoutUsersInput, redeem_logUncheckedUpdateWithoutUsersInput>
  }

  export type redeem_logUpdateManyWithWhereWithoutUsersInput = {
    where: redeem_logScalarWhereInput
    data: XOR<redeem_logUpdateManyMutationInput, redeem_logUncheckedUpdateManyWithoutUsersInput>
  }

  export type redeem_logScalarWhereInput = {
    AND?: redeem_logScalarWhereInput | redeem_logScalarWhereInput[]
    OR?: redeem_logScalarWhereInput[]
    NOT?: redeem_logScalarWhereInput | redeem_logScalarWhereInput[]
    id?: IntFilter<"redeem_log"> | number
    user_id?: IntFilter<"redeem_log"> | number
    redeem_amount?: IntFilter<"redeem_log"> | number
    time?: IntNullableFilter<"redeem_log"> | number | null
    link?: StringNullableFilter<"redeem_log"> | string | null
    isActive?: BoolFilter<"redeem_log"> | boolean
    createdAt?: DateTimeFilter<"redeem_log"> | Date | string
    updatedAt?: DateTimeFilter<"redeem_log"> | Date | string
  }

  export type buy_logCreateManyGameInput = {
    id?: number
    user_id: number
    buy_time: number
    price: number
    isActive?: boolean
    createdAt?: Date | string
  }

  export type game_actCreateManyGameInput = {
    id?: number
    user_id: number
    exp_date: number
    last_update?: number | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type buy_logUpdateWithoutGameInput = {
    buy_time?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: usersUpdateOneRequiredWithoutBuy_logNestedInput
  }

  export type buy_logUncheckedUpdateWithoutGameInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    buy_time?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type buy_logUncheckedUpdateManyWithoutGameInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    buy_time?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type game_actUpdateWithoutGameInput = {
    exp_date?: IntFieldUpdateOperationsInput | number
    last_update?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: usersUpdateOneRequiredWithoutGame_actNestedInput
  }

  export type game_actUncheckedUpdateWithoutGameInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    exp_date?: IntFieldUpdateOperationsInput | number
    last_update?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type game_actUncheckedUpdateManyWithoutGameInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    exp_date?: IntFieldUpdateOperationsInput | number
    last_update?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type buy_logCreateManyUsersInput = {
    id?: number
    game_id: number
    buy_time: number
    price: number
    isActive?: boolean
    createdAt?: Date | string
  }

  export type game_actCreateManyUsersInput = {
    id?: number
    game_id: number
    exp_date: number
    last_update?: number | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type redeem_logCreateManyUsersInput = {
    id?: number
    redeem_amount: number
    time?: number | null
    link?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type buy_logUpdateWithoutUsersInput = {
    buy_time?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    game?: gameUpdateOneRequiredWithoutBuy_logNestedInput
  }

  export type buy_logUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    game_id?: IntFieldUpdateOperationsInput | number
    buy_time?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type buy_logUncheckedUpdateManyWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    game_id?: IntFieldUpdateOperationsInput | number
    buy_time?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type game_actUpdateWithoutUsersInput = {
    exp_date?: IntFieldUpdateOperationsInput | number
    last_update?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    game?: gameUpdateOneRequiredWithoutGame_actNestedInput
  }

  export type game_actUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    game_id?: IntFieldUpdateOperationsInput | number
    exp_date?: IntFieldUpdateOperationsInput | number
    last_update?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type game_actUncheckedUpdateManyWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    game_id?: IntFieldUpdateOperationsInput | number
    exp_date?: IntFieldUpdateOperationsInput | number
    last_update?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type redeem_logUpdateWithoutUsersInput = {
    redeem_amount?: IntFieldUpdateOperationsInput | number
    time?: NullableIntFieldUpdateOperationsInput | number | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type redeem_logUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    redeem_amount?: IntFieldUpdateOperationsInput | number
    time?: NullableIntFieldUpdateOperationsInput | number | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type redeem_logUncheckedUpdateManyWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    redeem_amount?: IntFieldUpdateOperationsInput | number
    time?: NullableIntFieldUpdateOperationsInput | number | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use GameCountOutputTypeDefaultArgs instead
     */
    export type GameCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GameCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UsersCountOutputTypeDefaultArgs instead
     */
    export type UsersCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UsersCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use buy_logDefaultArgs instead
     */
    export type buy_logArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = buy_logDefaultArgs<ExtArgs>
    /**
     * @deprecated Use categoryDefaultArgs instead
     */
    export type categoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = categoryDefaultArgs<ExtArgs>
    /**
     * @deprecated Use gameDefaultArgs instead
     */
    export type gameArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = gameDefaultArgs<ExtArgs>
    /**
     * @deprecated Use game_actDefaultArgs instead
     */
    export type game_actArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = game_actDefaultArgs<ExtArgs>
    /**
     * @deprecated Use redeem_logDefaultArgs instead
     */
    export type redeem_logArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = redeem_logDefaultArgs<ExtArgs>
    /**
     * @deprecated Use usersDefaultArgs instead
     */
    export type usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = usersDefaultArgs<ExtArgs>
    /**
     * @deprecated Use setupDefaultArgs instead
     */
    export type setupArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = setupDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}